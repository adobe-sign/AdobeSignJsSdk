/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerJsClient);
  }
}(this, function(expect, SwaggerJsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwaggerJsClient.FormField();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FormField', function() {
    it('should create an instance of FormField', function() {
      // uncomment below and update the code to test FormField
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be.a(SwaggerJsClient.FormField);
    });

    it('should have the property alignment (base name: "alignment")', function() {
      // uncomment below and update the code to test the property alignment
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property assignee (base name: "assignee")', function() {
      // uncomment below and update the code to test the property assignee
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property backgroundColor (base name: "backgroundColor")', function() {
      // uncomment below and update the code to test the property backgroundColor
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property borderColor (base name: "borderColor")', function() {
      // uncomment below and update the code to test the property borderColor
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property borderStyle (base name: "borderStyle")', function() {
      // uncomment below and update the code to test the property borderStyle
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property borderWidth (base name: "borderWidth")', function() {
      // uncomment below and update the code to test the property borderWidth
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property calculated (base name: "calculated")', function() {
      // uncomment below and update the code to test the property calculated
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property conditionalAction (base name: "conditionalAction")', function() {
      // uncomment below and update the code to test the property conditionalAction
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property contentType (base name: "contentType")', function() {
      // uncomment below and update the code to test the property contentType
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property defaultValue (base name: "defaultValue")', function() {
      // uncomment below and update the code to test the property defaultValue
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property displayFormat (base name: "displayFormat")', function() {
      // uncomment below and update the code to test the property displayFormat
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property displayFormatType (base name: "displayFormatType")', function() {
      // uncomment below and update the code to test the property displayFormatType
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property displayLabel (base name: "displayLabel")', function() {
      // uncomment below and update the code to test the property displayLabel
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property fontColor (base name: "fontColor")', function() {
      // uncomment below and update the code to test the property fontColor
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property fontName (base name: "fontName")', function() {
      // uncomment below and update the code to test the property fontName
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property fontSize (base name: "fontSize")', function() {
      // uncomment below and update the code to test the property fontSize
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property hiddenOptions (base name: "hiddenOptions")', function() {
      // uncomment below and update the code to test the property hiddenOptions
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property hyperlink (base name: "hyperlink")', function() {
      // uncomment below and update the code to test the property hyperlink
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property inputType (base name: "inputType")', function() {
      // uncomment below and update the code to test the property inputType
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property locations (base name: "locations")', function() {
      // uncomment below and update the code to test the property locations
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property masked (base name: "masked")', function() {
      // uncomment below and update the code to test the property masked
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property maskingText (base name: "maskingText")', function() {
      // uncomment below and update the code to test the property maskingText
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property maxLength (base name: "maxLength")', function() {
      // uncomment below and update the code to test the property maxLength
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property maxValue (base name: "maxValue")', function() {
      // uncomment below and update the code to test the property maxValue
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property minLength (base name: "minLength")', function() {
      // uncomment below and update the code to test the property minLength
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property minValue (base name: "minValue")', function() {
      // uncomment below and update the code to test the property minValue
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property origin (base name: "origin")', function() {
      // uncomment below and update the code to test the property origin
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property radioCheckType (base name: "radioCheckType")', function() {
      // uncomment below and update the code to test the property radioCheckType
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property readOnly (base name: "readOnly")', function() {
      // uncomment below and update the code to test the property readOnly
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property required (base name: "required")', function() {
      // uncomment below and update the code to test the property required
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property tooltip (base name: "tooltip")', function() {
      // uncomment below and update the code to test the property tooltip
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property urlOverridable (base name: "urlOverridable")', function() {
      // uncomment below and update the code to test the property urlOverridable
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property validation (base name: "validation")', function() {
      // uncomment below and update the code to test the property validation
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property validationData (base name: "validationData")', function() {
      // uncomment below and update the code to test the property validationData
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property validationErrMsg (base name: "validationErrMsg")', function() {
      // uncomment below and update the code to test the property validationErrMsg
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property valueExpression (base name: "valueExpression")', function() {
      // uncomment below and update the code to test the property valueExpression
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property visible (base name: "visible")', function() {
      // uncomment below and update the code to test the property visible
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

    it('should have the property visibleOptions (base name: "visibleOptions")', function() {
      // uncomment below and update the code to test the property visibleOptions
      //var instane = new SwaggerJsClient.FormField();
      //expect(instance).to.be();
    });

  });

}));
