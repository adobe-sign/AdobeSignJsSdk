/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.MegaSignChildAgreementsFileInfo = factory(root.SwaggerJsClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The MegaSignChildAgreementsFileInfo model module.
   * @module model/megaSigns/MegaSignChildAgreementsFileInfo
   * @version 6.0.0
   */

  /**
   * Constructs a new <code>MegaSignChildAgreementsFileInfo</code>.
   * @alias module:model/megaSigns/MegaSignChildAgreementsFileInfo
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>MegaSignChildAgreementsFileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignChildAgreementsFileInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignChildAgreementsFileInfo} The populated <code>MegaSignChildAgreementsFileInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('childAgreementsInfoFileId')) {
        obj['childAgreementsInfoFileId'] = ApiClient.convertToType(data['childAgreementsInfoFileId'], 'String');
      }
      if (data.hasOwnProperty('fileType')) {
        obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
      }
      if (data.hasOwnProperty('transientDocumentId')) {
        obj['transientDocumentId'] = ApiClient.convertToType(data['transientDocumentId'], 'String');
      }
    }
    return obj;
  }

  /**
   * id of the file containg information about the existing childAgreementsInfo associated with the megaSign. Will be ignored in POST call and in case of GET call, this is the only thing that will be returned. The content of the file can be fetched through GET /megaSigns/{megaSignId}/childAgreementsInfo/{childAgreementsInfoFileId} endpoint.
   * @member {String} childAgreementsInfoFileId
   */
  exports.prototype['childAgreementsInfoFileId'] = undefined;
  /**
   * Input type through which participantSetsInfos will be provided. Whichever input type is provided, the values should be provided in its corresponding value object. Currently we are supporting CSV file format for providing megaSIgn child recipients.
   * @member {module:model/megaSigns/MegaSignChildAgreementsFileInfo.FileTypeEnum} fileType
   */
  exports.prototype['fileType'] = undefined;
  /**
   * Transient id of the input file which contains participantSetsInfos. Currently only csv format is suppported. More details about CSV format <a href='https://www.adobe.com/go/documentcloud_megasigncsv'>here</a>  
   * @member {String} transientDocumentId
   */
  exports.prototype['transientDocumentId'] = undefined;


  /**
   * Allowed values for the <code>fileType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FileTypeEnum = {
    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV"  };


  return exports;
}));


