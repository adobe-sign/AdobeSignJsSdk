/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.MegaSignSecurityOption = factory(root.SwaggerJsClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The MegaSignSecurityOption model module.
   * @module model/megaSigns/MegaSignSecurityOption
   * @version 6.0.0
   */

  /**
   * Constructs a new <code>MegaSignSecurityOption</code>.
   * @alias module:model/megaSigns/MegaSignSecurityOption
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>MegaSignSecurityOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignSecurityOption} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignSecurityOption} The populated <code>MegaSignSecurityOption</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('externalAuthenticationMethod')) {
        obj['externalAuthenticationMethod'] = ApiClient.convertToType(data['externalAuthenticationMethod'], 'String');
      }
      if (data.hasOwnProperty('externalPassword')) {
        obj['externalPassword'] = ApiClient.convertToType(data['externalPassword'], 'String');
      }
      if (data.hasOwnProperty('internalAuthenticationMethod')) {
        obj['internalAuthenticationMethod'] = ApiClient.convertToType(data['internalAuthenticationMethod'], 'String');
      }
      if (data.hasOwnProperty('internalPassword')) {
        obj['internalPassword'] = ApiClient.convertToType(data['internalPassword'], 'String');
      }
      if (data.hasOwnProperty('openPassword')) {
        obj['openPassword'] = ApiClient.convertToType(data['openPassword'], 'String');
      }
    }
    return obj;
  }

  /**
   * The authentication method for the participants to have access to view and sign the document.
   * @member {module:model/megaSigns/MegaSignSecurityOption.ExternalAuthenticationMethodEnum} externalAuthenticationMethod
   */
  exports.prototype['externalAuthenticationMethod'] = undefined;
  /**
   * The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
   * @member {String} externalPassword
   */
  exports.prototype['externalPassword'] = undefined;
  /**
   * The authentication method for the participants to have access to view and sign the document.
   * @member {module:model/megaSigns/MegaSignSecurityOption.InternalAuthenticationMethodEnum} internalAuthenticationMethod
   */
  exports.prototype['internalAuthenticationMethod'] = undefined;
  /**
   * The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
   * @member {String} internalPassword
   */
  exports.prototype['internalPassword'] = undefined;
  /**
   * The secondary password that will be used to secure the PDF document. Note that AdobeSign will never show this password to anyone, so you will need to separately communicate it to any relevant parties
   * @member {String} openPassword
   */
  exports.prototype['openPassword'] = undefined;


  /**
   * Allowed values for the <code>externalAuthenticationMethod</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ExternalAuthenticationMethodEnum = {
    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",
    /**
     * value: "WEB_IDENTITY"
     * @const
     */
    "WEB_IDENTITY": "WEB_IDENTITY",
    /**
     * value: "KBA"
     * @const
     */
    "KBA": "KBA",
    /**
     * value: "PASSWORD"
     * @const
     */
    "PASSWORD": "PASSWORD"  };

  /**
   * Allowed values for the <code>internalAuthenticationMethod</code> property.
   * @enum {String}
   * @readonly
   */
  exports.InternalAuthenticationMethodEnum = {
    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",
    /**
     * value: "WEB_IDENTITY"
     * @const
     */
    "WEB_IDENTITY": "WEB_IDENTITY",
    /**
     * value: "KBA"
     * @const
     */
    "KBA": "KBA",
    /**
     * value: "PASSWORD"
     * @const
     */
    "PASSWORD": "PASSWORD"  };


  return exports;
}));


