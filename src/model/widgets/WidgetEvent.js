/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/widgets/DigitalSignatureInfo', 'model/widgets/WidgetEventDeviceLocation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DigitalSignatureInfo'), require('./WidgetEventDeviceLocation'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.WidgetEvent = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.DigitalSignatureInfo, root.SwaggerJsClient.WidgetEventDeviceLocation);
  }
}(this, function(ApiClient, DigitalSignatureInfo, WidgetEventDeviceLocation) {
  'use strict';




  /**
   * The WidgetEvent model module.
   * @module model/widgets/WidgetEvent
   * @version 6.0.0
   */

  /**
   * Constructs a new <code>WidgetEvent</code>.
   * @alias module:model/widgets/WidgetEvent
   * @class
   */
  var exports = function() {
    var _this = this;




















  };

  /**
   * Constructs a <code>WidgetEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetEvent} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetEvent} The populated <code>WidgetEvent</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('actingUserEmail')) {
        obj['actingUserEmail'] = ApiClient.convertToType(data['actingUserEmail'], 'String');
      }
      if (data.hasOwnProperty('actingUserIpAddress')) {
        obj['actingUserIpAddress'] = ApiClient.convertToType(data['actingUserIpAddress'], 'String');
      }
      if (data.hasOwnProperty('actingUserName')) {
        obj['actingUserName'] = ApiClient.convertToType(data['actingUserName'], 'String');
      }
      if (data.hasOwnProperty('comment')) {
        obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('deviceLocation')) {
        obj['deviceLocation'] = WidgetEventDeviceLocation.constructFromObject(data['deviceLocation']);
      }
      if (data.hasOwnProperty('devicePhoneNumber')) {
        obj['devicePhoneNumber'] = ApiClient.convertToType(data['devicePhoneNumber'], 'String');
      }
      if (data.hasOwnProperty('digitalSignatureInfo')) {
        obj['digitalSignatureInfo'] = DigitalSignatureInfo.constructFromObject(data['digitalSignatureInfo']);
      }
      if (data.hasOwnProperty('initiatingUserEmail')) {
        obj['initiatingUserEmail'] = ApiClient.convertToType(data['initiatingUserEmail'], 'String');
      }
      if (data.hasOwnProperty('initiatingUserName')) {
        obj['initiatingUserName'] = ApiClient.convertToType(data['initiatingUserName'], 'String');
      }
      if (data.hasOwnProperty('participantEmail')) {
        obj['participantEmail'] = ApiClient.convertToType(data['participantEmail'], 'String');
      }
      if (data.hasOwnProperty('participantId')) {
        obj['participantId'] = ApiClient.convertToType(data['participantId'], 'String');
      }
      if (data.hasOwnProperty('participantRole')) {
        obj['participantRole'] = ApiClient.convertToType(data['participantRole'], 'String');
      }
      if (data.hasOwnProperty('synchronizationId')) {
        obj['synchronizationId'] = ApiClient.convertToType(data['synchronizationId'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('vaultEventId')) {
        obj['vaultEventId'] = ApiClient.convertToType(data['vaultEventId'], 'String');
      }
      if (data.hasOwnProperty('vaultProviderName')) {
        obj['vaultProviderName'] = ApiClient.convertToType(data['vaultProviderName'], 'String');
      }
      if (data.hasOwnProperty('versionId')) {
        obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
      }
    }
    return obj;
  }

  /**
   * Email address of the user that created the event
   * @member {String} actingUserEmail
   */
  exports.prototype['actingUserEmail'] = undefined;
  /**
   * The IP address of the user that created the event
   * @member {String} actingUserIpAddress
   */
  exports.prototype['actingUserIpAddress'] = undefined;
  /**
   * The name of the acting user
   * @member {String} actingUserName
   */
  exports.prototype['actingUserName'] = undefined;
  /**
   * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
   * @member {String} comment
   */
  exports.prototype['comment'] = undefined;
  /**
   * The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * A description of the audit event
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Location of the device that generated the event (This value may be null due to limited privileges)
   * @member {module:model/widgets/WidgetEventDeviceLocation} deviceLocation
   */
  exports.prototype['deviceLocation'] = undefined;
  /**
   * Phone number from the device used when the participation is completed on a mobile phone
   * @member {String} devicePhoneNumber
   */
  exports.prototype['devicePhoneNumber'] = undefined;
  /**
   * This is present for ESIGNED events when the participation is signed digitally
   * @member {module:model/widgets/DigitalSignatureInfo} digitalSignatureInfo
   */
  exports.prototype['digitalSignatureInfo'] = undefined;
  /**
   * Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect
   * @member {String} initiatingUserEmail
   */
  exports.prototype['initiatingUserEmail'] = undefined;
  /**
   * Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect
   * @member {String} initiatingUserName
   */
  exports.prototype['initiatingUserName'] = undefined;
  /**
   * Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to
   * @member {String} participantEmail
   */
  exports.prototype['participantEmail'] = undefined;
  /**
   * The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to
   * @member {String} participantId
   */
  exports.prototype['participantId'] = undefined;
  /**
   * Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).
   * @member {module:model/widgets/WidgetEvent.ParticipantRoleEnum} participantRole
   */
  exports.prototype['participantRole'] = undefined;
  /**
   * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
   * @member {String} synchronizationId
   */
  exports.prototype['synchronizationId'] = undefined;
  /**
   * Type of widget event
   * @member {module:model/widgets/WidgetEvent.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
   * @member {String} vaultEventId
   */
  exports.prototype['vaultEventId'] = undefined;
  /**
   * Name of the vault provider for the vault event (if vaulted, otherwise null)
   * @member {String} vaultProviderName
   */
  exports.prototype['vaultProviderName'] = undefined;
  /**
   * An ID which uniquely identifies the version of the document associated with this audit event
   * @member {String} versionId
   */
  exports.prototype['versionId'] = undefined;


  /**
   * Allowed values for the <code>participantRole</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ParticipantRoleEnum = {
    /**
     * value: "SIGNER"
     * @const
     */
    "SIGNER": "SIGNER",
    /**
     * value: "DELEGATE_TO_SIGNER"
     * @const
     */
    "DELEGATE_TO_SIGNER": "DELEGATE_TO_SIGNER",
    /**
     * value: "APPROVER"
     * @const
     */
    "APPROVER": "APPROVER",
    /**
     * value: "DELEGATE_TO_APPROVER"
     * @const
     */
    "DELEGATE_TO_APPROVER": "DELEGATE_TO_APPROVER",
    /**
     * value: "ACCEPTOR"
     * @const
     */
    "ACCEPTOR": "ACCEPTOR",
    /**
     * value: "DELEGATE_TO_ACCEPTOR"
     * @const
     */
    "DELEGATE_TO_ACCEPTOR": "DELEGATE_TO_ACCEPTOR",
    /**
     * value: "FORM_FILLER"
     * @const
     */
    "FORM_FILLER": "FORM_FILLER",
    /**
     * value: "DELEGATE_TO_FORM_FILLER"
     * @const
     */
    "DELEGATE_TO_FORM_FILLER": "DELEGATE_TO_FORM_FILLER",
    /**
     * value: "CERTIFIED_RECIPIENT"
     * @const
     */
    "CERTIFIED_RECIPIENT": "CERTIFIED_RECIPIENT",
    /**
     * value: "DELEGATE_TO_CERTIFIED_RECIPIENT"
     * @const
     */
    "DELEGATE_TO_CERTIFIED_RECIPIENT": "DELEGATE_TO_CERTIFIED_RECIPIENT",
    /**
     * value: "SHARE"
     * @const
     */
    "SHARE": "SHARE",
    /**
     * value: "SENDER"
     * @const
     */
    "SENDER": "SENDER"  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "AUTO_CANCELLED_CONVERSION_PROBLEM"
     * @const
     */
    "AUTO_CANCELLED_CONVERSION_PROBLEM": "AUTO_CANCELLED_CONVERSION_PROBLEM",
    /**
     * value: "ACTIVATED"
     * @const
     */
    "ACTIVATED": "ACTIVATED",
    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",
    /**
     * value: "DEACTIVATED"
     * @const
     */
    "DEACTIVATED": "DEACTIVATED",
    /**
     * value: "MODIFIED"
     * @const
     */
    "MODIFIED": "MODIFIED"  };


  return exports;
}));


