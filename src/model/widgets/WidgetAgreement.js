/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/widgets/DisplayWidgetParticipantSetInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DisplayWidgetParticipantSetInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.WidgetAgreement = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.DisplayWidgetParticipantSetInfo);
  }
}(this, function(ApiClient, DisplayWidgetParticipantSetInfo) {
  'use strict';




  /**
   * The WidgetAgreement model module.
   * @module model/widgets/WidgetAgreement
   * @version 6.0.0
   */

  /**
   * Constructs a new <code>WidgetAgreement</code>.
   * @alias module:model/widgets/WidgetAgreement
   * @class
   */
  var exports = function() {
    var _this = this;









  };

  /**
   * Constructs a <code>WidgetAgreement</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetAgreement} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetAgreement} The populated <code>WidgetAgreement</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('displayDate')) {
        obj['displayDate'] = ApiClient.convertToType(data['displayDate'], 'Date');
      }
      if (data.hasOwnProperty('displayParticipantSetInfos')) {
        obj['displayParticipantSetInfos'] = ApiClient.convertToType(data['displayParticipantSetInfos'], [DisplayWidgetParticipantSetInfo]);
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('esign')) {
        obj['esign'] = ApiClient.convertToType(data['esign'], 'Boolean');
      }
      if (data.hasOwnProperty('hidden')) {
        obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
      }
      if (data.hasOwnProperty('latestVersionId')) {
        obj['latestVersionId'] = ApiClient.convertToType(data['latestVersionId'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
    }
    return obj;
  }

  /**
   * The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
   * @member {Date} displayDate
   */
  exports.prototype['displayDate'] = undefined;
  /**
   * The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
   * @member {Array.<module:model/widgets/DisplayWidgetParticipantSetInfo>} displayParticipantSetInfos
   */
  exports.prototype['displayParticipantSetInfos'] = undefined;
  /**
   * The unique identifier of the agreement.If provided in POST, it will simply be ignored
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * True if this is an e-sign document
   * @member {Boolean} esign
   */
  exports.prototype['esign'] = undefined;
  /**
   * True if agreement is hidden for the user
   * @member {Boolean} hidden
   */
  exports.prototype['hidden'] = undefined;
  /**
   * A version ID which uniquely identifies the current version of the agreement
   * @member {String} latestVersionId
   */
  exports.prototype['latestVersionId'] = undefined;
  /**
   * Name of the Agreement
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The current status of the document from the perspective of the originator
   * @member {module:model/widgets/WidgetAgreement.StatusEnum} status
   */
  exports.prototype['status'] = undefined;


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "WAITING_FOR_MY_SIGNATURE"
     * @const
     */
    "WAITING_FOR_MY_SIGNATURE": "WAITING_FOR_MY_SIGNATURE",
    /**
     * value: "WAITING_FOR_MY_APPROVAL"
     * @const
     */
    "WAITING_FOR_MY_APPROVAL": "WAITING_FOR_MY_APPROVAL",
    /**
     * value: "WAITING_FOR_MY_DELEGATION"
     * @const
     */
    "WAITING_FOR_MY_DELEGATION": "WAITING_FOR_MY_DELEGATION",
    /**
     * value: "WAITING_FOR_MY_ACKNOWLEDGEMENT"
     * @const
     */
    "WAITING_FOR_MY_ACKNOWLEDGEMENT": "WAITING_FOR_MY_ACKNOWLEDGEMENT",
    /**
     * value: "WAITING_FOR_MY_ACCEPTANCE"
     * @const
     */
    "WAITING_FOR_MY_ACCEPTANCE": "WAITING_FOR_MY_ACCEPTANCE",
    /**
     * value: "WAITING_FOR_MY_FORM_FILLING"
     * @const
     */
    "WAITING_FOR_MY_FORM_FILLING": "WAITING_FOR_MY_FORM_FILLING",
    /**
     * value: "OUT_FOR_SIGNATURE"
     * @const
     */
    "OUT_FOR_SIGNATURE": "OUT_FOR_SIGNATURE",
    /**
     * value: "OUT_FOR_APPROVAL"
     * @const
     */
    "OUT_FOR_APPROVAL": "OUT_FOR_APPROVAL",
    /**
     * value: "OUT_FOR_DELIVERY"
     * @const
     */
    "OUT_FOR_DELIVERY": "OUT_FOR_DELIVERY",
    /**
     * value: "OUT_FOR_ACCEPTANCE"
     * @const
     */
    "OUT_FOR_ACCEPTANCE": "OUT_FOR_ACCEPTANCE",
    /**
     * value: "OUT_FOR_FORM_FILLING"
     * @const
     */
    "OUT_FOR_FORM_FILLING": "OUT_FOR_FORM_FILLING",
    /**
     * value: "SIGNED"
     * @const
     */
    "SIGNED": "SIGNED",
    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",
    /**
     * value: "FORM_FILLED"
     * @const
     */
    "FORM_FILLED": "FORM_FILLED",
    /**
     * value: "DELIVERED"
     * @const
     */
    "DELIVERED": "DELIVERED",
    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED",
    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",
    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",
    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",
    /**
     * value: "WAITING_FOR_PREFILL"
     * @const
     */
    "WAITING_FOR_PREFILL": "WAITING_FOR_PREFILL",
    /**
     * value: "DOCUMENTS_NOT_YET_PROCESSED"
     * @const
     */
    "DOCUMENTS_NOT_YET_PROCESSED": "DOCUMENTS_NOT_YET_PROCESSED",
    /**
     * value: "WAITING_FOR_MY_VERIFICATION"
     * @const
     */
    "WAITING_FOR_MY_VERIFICATION": "WAITING_FOR_MY_VERIFICATION",
    /**
     * value: "WAITING_FOR_VERIFICATION"
     * @const
     */
    "WAITING_FOR_VERIFICATION": "WAITING_FOR_VERIFICATION"  };


  return exports;
}));


