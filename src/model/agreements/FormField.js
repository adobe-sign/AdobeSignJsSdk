/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/agreements/FormFieldConditionalAction', 'model/agreements/FormFieldHyperlink', 'model/agreements/FormFieldLocation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FormFieldConditionalAction'), require('./FormFieldHyperlink'), require('./FormFieldLocation'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.FormField = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.FormFieldConditionalAction, root.SwaggerJsClient.FormFieldHyperlink, root.SwaggerJsClient.FormFieldLocation);
  }
}(this, function(ApiClient, FormFieldConditionalAction, FormFieldHyperlink, FormFieldLocation) {
  'use strict';




  /**
   * The FormField model module.
   * @module model/agreements/FormField
   * @version 6.0.0
   */

  /**
   * Constructs a new <code>FormField</code>.
   * A form field for an agreement.
   * @alias module:model/agreements/FormField
   * @class
   */
  var exports = function() {
    var _this = this;








































  };

  /**
   * Constructs a <code>FormField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/FormField} obj Optional instance to populate.
   * @return {module:model/agreements/FormField} The populated <code>FormField</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('alignment')) {
        obj['alignment'] = ApiClient.convertToType(data['alignment'], 'String');
      }
      if (data.hasOwnProperty('assignee')) {
        obj['assignee'] = ApiClient.convertToType(data['assignee'], 'String');
      }
      if (data.hasOwnProperty('backgroundColor')) {
        obj['backgroundColor'] = ApiClient.convertToType(data['backgroundColor'], 'String');
      }
      if (data.hasOwnProperty('borderColor')) {
        obj['borderColor'] = ApiClient.convertToType(data['borderColor'], 'String');
      }
      if (data.hasOwnProperty('borderStyle')) {
        obj['borderStyle'] = ApiClient.convertToType(data['borderStyle'], 'String');
      }
      if (data.hasOwnProperty('borderWidth')) {
        obj['borderWidth'] = ApiClient.convertToType(data['borderWidth'], 'Number');
      }
      if (data.hasOwnProperty('calculated')) {
        obj['calculated'] = ApiClient.convertToType(data['calculated'], 'Boolean');
      }
      if (data.hasOwnProperty('conditionalAction')) {
        obj['conditionalAction'] = FormFieldConditionalAction.constructFromObject(data['conditionalAction']);
      }
      if (data.hasOwnProperty('contentType')) {
        obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
      }
      if (data.hasOwnProperty('defaultValue')) {
        obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], 'String');
      }
      if (data.hasOwnProperty('displayFormat')) {
        obj['displayFormat'] = ApiClient.convertToType(data['displayFormat'], 'String');
      }
      if (data.hasOwnProperty('displayFormatType')) {
        obj['displayFormatType'] = ApiClient.convertToType(data['displayFormatType'], 'String');
      }
      if (data.hasOwnProperty('displayLabel')) {
        obj['displayLabel'] = ApiClient.convertToType(data['displayLabel'], 'String');
      }
      if (data.hasOwnProperty('fontColor')) {
        obj['fontColor'] = ApiClient.convertToType(data['fontColor'], 'String');
      }
      if (data.hasOwnProperty('fontName')) {
        obj['fontName'] = ApiClient.convertToType(data['fontName'], 'String');
      }
      if (data.hasOwnProperty('fontSize')) {
        obj['fontSize'] = ApiClient.convertToType(data['fontSize'], 'Number');
      }
      if (data.hasOwnProperty('hiddenOptions')) {
        obj['hiddenOptions'] = ApiClient.convertToType(data['hiddenOptions'], ['String']);
      }
      if (data.hasOwnProperty('hyperlink')) {
        obj['hyperlink'] = FormFieldHyperlink.constructFromObject(data['hyperlink']);
      }
      if (data.hasOwnProperty('inputType')) {
        obj['inputType'] = ApiClient.convertToType(data['inputType'], 'String');
      }
      if (data.hasOwnProperty('locations')) {
        obj['locations'] = ApiClient.convertToType(data['locations'], [FormFieldLocation]);
      }
      if (data.hasOwnProperty('masked')) {
        obj['masked'] = ApiClient.convertToType(data['masked'], 'Boolean');
      }
      if (data.hasOwnProperty('maskingText')) {
        obj['maskingText'] = ApiClient.convertToType(data['maskingText'], 'String');
      }
      if (data.hasOwnProperty('maxLength')) {
        obj['maxLength'] = ApiClient.convertToType(data['maxLength'], 'Number');
      }
      if (data.hasOwnProperty('maxValue')) {
        obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'Number');
      }
      if (data.hasOwnProperty('minLength')) {
        obj['minLength'] = ApiClient.convertToType(data['minLength'], 'Number');
      }
      if (data.hasOwnProperty('minValue')) {
        obj['minValue'] = ApiClient.convertToType(data['minValue'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('origin')) {
        obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
      }
      if (data.hasOwnProperty('radioCheckType')) {
        obj['radioCheckType'] = ApiClient.convertToType(data['radioCheckType'], 'String');
      }
      if (data.hasOwnProperty('readOnly')) {
        obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
      }
      if (data.hasOwnProperty('required')) {
        obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
      }
      if (data.hasOwnProperty('tooltip')) {
        obj['tooltip'] = ApiClient.convertToType(data['tooltip'], 'String');
      }
      if (data.hasOwnProperty('urlOverridable')) {
        obj['urlOverridable'] = ApiClient.convertToType(data['urlOverridable'], 'Boolean');
      }
      if (data.hasOwnProperty('validation')) {
        obj['validation'] = ApiClient.convertToType(data['validation'], 'String');
      }
      if (data.hasOwnProperty('validationData')) {
        obj['validationData'] = ApiClient.convertToType(data['validationData'], 'String');
      }
      if (data.hasOwnProperty('validationErrMsg')) {
        obj['validationErrMsg'] = ApiClient.convertToType(data['validationErrMsg'], 'String');
      }
      if (data.hasOwnProperty('valueExpression')) {
        obj['valueExpression'] = ApiClient.convertToType(data['valueExpression'], 'String');
      }
      if (data.hasOwnProperty('visible')) {
        obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
      }
      if (data.hasOwnProperty('visibleOptions')) {
        obj['visibleOptions'] = ApiClient.convertToType(data['visibleOptions'], ['String']);
      }
    }
    return obj;
  }

  /**
   * Alignment of the text.
   * @member {module:model/agreements/FormField.AlignmentEnum} alignment
   */
  exports.prototype['alignment'] = undefined;
  /**
   * Who the field is assigned to.  Either a participant set id, null, NOBODY or PREFILL.
   * @member {String} assignee
   */
  exports.prototype['assignee'] = undefined;
  /**
   * Background color of the form field in RGB or HEX format
   * @member {String} backgroundColor
   */
  exports.prototype['backgroundColor'] = undefined;
  /**
   * Color of the border of the field in RGB or HEX format
   * @member {String} borderColor
   */
  exports.prototype['borderColor'] = undefined;
  /**
   * Style of the border of the field.
   * @member {module:model/agreements/FormField.BorderStyleEnum} borderStyle
   */
  exports.prototype['borderStyle'] = undefined;
  /**
   * Width of the border of the field in pixels
   * @member {Number} borderWidth
   */
  exports.prototype['borderWidth'] = undefined;
  /**
   * true if this field's value is calculated from an expression, else false
   * @member {Boolean} calculated
   */
  exports.prototype['calculated'] = undefined;
  /**
   * A predicate (or set of predicates) that determines whether this field is visible and enabled.
   * @member {module:model/agreements/FormFieldConditionalAction} conditionalAction
   */
  exports.prototype['conditionalAction'] = undefined;
  /**
   * Content Type of the form field.
   * @member {module:model/agreements/FormField.ContentTypeEnum} contentType
   */
  exports.prototype['contentType'] = undefined;
  /**
   * Default value of the form field
   * @member {String} defaultValue
   */
  exports.prototype['defaultValue'] = undefined;
  /**
   * Format of the value of the field to be displayed based on the displayFormatType property.
   * @member {String} displayFormat
   */
  exports.prototype['displayFormat'] = undefined;
  /**
   * Format type of the text field.
   * @member {module:model/agreements/FormField.DisplayFormatTypeEnum} displayFormatType
   */
  exports.prototype['displayFormatType'] = undefined;
  /**
   * Display label attached to the field
   * @member {String} displayLabel
   */
  exports.prototype['displayLabel'] = undefined;
  /**
   * Font color of the form field in RGB or HEX format
   * @member {String} fontColor
   */
  exports.prototype['fontColor'] = undefined;
  /**
   * Font name of the form field
   * @member {String} fontName
   */
  exports.prototype['fontName'] = undefined;
  /**
   * Font size of the form field in points
   * @member {Number} fontSize
   */
  exports.prototype['fontSize'] = undefined;
  /**
   * Text values which are hidden in a drop down form field
   * @member {Array.<String>} hiddenOptions
   */
  exports.prototype['hiddenOptions'] = undefined;
  /**
   * Hyperlink-specific data (e.g. as url, link type)
   * @member {module:model/agreements/FormFieldHyperlink} hyperlink
   */
  exports.prototype['hyperlink'] = undefined;
  /**
   * Input type of the form field
   * @member {module:model/agreements/FormField.InputTypeEnum} inputType
   */
  exports.prototype['inputType'] = undefined;
  /**
   * All locations in a document where the form field is placed
   * @member {Array.<module:model/agreements/FormFieldLocation>} locations
   */
  exports.prototype['locations'] = undefined;
  /**
   * true if the input entered by the signer has to be masked (like password), false if it shouldn't be
   * @member {Boolean} masked
   */
  exports.prototype['masked'] = undefined;
  /**
   * Text to mask the masked form field
   * @member {String} maskingText
   */
  exports.prototype['maskingText'] = undefined;
  /**
   * Maximum length of the input text field in terms of no. of characters
   * @member {Number} maxLength
   */
  exports.prototype['maxLength'] = undefined;
  /**
   * Upper bound of the number that can be entered by the signer
   * @member {Number} maxValue
   */
  exports.prototype['maxValue'] = undefined;
  /**
   * Minimum length of the input text field in terms of no. of characters
   * @member {Number} minLength
   */
  exports.prototype['minLength'] = undefined;
  /**
   * Lower bound of the number that can be entered by the signer
   * @member {Number} minValue
   */
  exports.prototype['minValue'] = undefined;
  /**
   * The name of the form field
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Origin of Form Field
   * @member {module:model/agreements/FormField.OriginEnum} origin
   */
  exports.prototype['origin'] = undefined;
  /**
   * The type of radio button (if field is radio button, identified by inputType).
   * @member {module:model/agreements/FormField.RadioCheckTypeEnum} radioCheckType
   */
  exports.prototype['radioCheckType'] = undefined;
  /**
   * true if it is a read-only field, else false
   * @member {Boolean} readOnly
   */
  exports.prototype['readOnly'] = undefined;
  /**
   * true if it is a mandatory field to be filled by the signer, else false
   * @member {Boolean} required
   */
  exports.prototype['required'] = undefined;
  /**
   * Text that appears while hovering over the field
   * @member {String} tooltip
   */
  exports.prototype['tooltip'] = undefined;
  /**
   * For widget text fields only - true if the default value may come from the URL, else false
   * @member {Boolean} urlOverridable
   */
  exports.prototype['urlOverridable'] = undefined;
  /**
   * Rule for validating the field value.
   * @member {module:model/agreements/FormField.ValidationEnum} validation
   */
  exports.prototype['validation'] = undefined;
  /**
   * Further data for validating input with regards to the field's specified format. The contents and interpretation of formatData depends on the value of validation.
   * @member {String} validationData
   */
  exports.prototype['validationData'] = undefined;
  /**
   * Error message to be shown to the signer if filled value doesn't match the validations of the form field
   * @member {String} validationErrMsg
   */
  exports.prototype['validationErrMsg'] = undefined;
  /**
   * Expression to calculate value of the form field
   * @member {String} valueExpression
   */
  exports.prototype['valueExpression'] = undefined;
  /**
   * If set to false, then the form field is hidden.  Otherwise, it is visible.
   * @member {Boolean} visible
   */
  exports.prototype['visible'] = undefined;
  /**
   * Text values which are visible in a drop down form field
   * @member {Array.<String>} visibleOptions
   */
  exports.prototype['visibleOptions'] = undefined;


  /**
   * Allowed values for the <code>alignment</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AlignmentEnum = {
    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",
    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT",
    /**
     * value: "CENTER"
     * @const
     */
    "CENTER": "CENTER"  };

  /**
   * Allowed values for the <code>borderStyle</code> property.
   * @enum {String}
   * @readonly
   */
  exports.BorderStyleEnum = {
    /**
     * value: "SOLID"
     * @const
     */
    "SOLID": "SOLID",
    /**
     * value: "DASHED"
     * @const
     */
    "DASHED": "DASHED",
    /**
     * value: "BEVELED"
     * @const
     */
    "BEVELED": "BEVELED",
    /**
     * value: "INSET"
     * @const
     */
    "INSET": "INSET",
    /**
     * value: "UNDERLINE"
     * @const
     */
    "UNDERLINE": "UNDERLINE"  };

  /**
   * Allowed values for the <code>contentType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ContentTypeEnum = {
    /**
     * value: "DATA"
     * @const
     */
    "DATA": "DATA",
    /**
     * value: "SIGNATURE_BLOCK"
     * @const
     */
    "SIGNATURE_BLOCK": "SIGNATURE_BLOCK",
    /**
     * value: "SIGNATURE"
     * @const
     */
    "SIGNATURE": "SIGNATURE",
    /**
     * value: "SIGNER_NAME"
     * @const
     */
    "SIGNER_NAME": "SIGNER_NAME",
    /**
     * value: "SIGNER_FIRST_NAME"
     * @const
     */
    "SIGNER_FIRST_NAME": "SIGNER_FIRST_NAME",
    /**
     * value: "SIGNER_LAST_NAME"
     * @const
     */
    "SIGNER_LAST_NAME": "SIGNER_LAST_NAME",
    /**
     * value: "SIGNER_INITIALS"
     * @const
     */
    "SIGNER_INITIALS": "SIGNER_INITIALS",
    /**
     * value: "SIGNER_EMAIL"
     * @const
     */
    "SIGNER_EMAIL": "SIGNER_EMAIL",
    /**
     * value: "SIGNER_TITLE"
     * @const
     */
    "SIGNER_TITLE": "SIGNER_TITLE",
    /**
     * value: "SIGNER_COMPANY"
     * @const
     */
    "SIGNER_COMPANY": "SIGNER_COMPANY",
    /**
     * value: "SIGNATURE_DATE"
     * @const
     */
    "SIGNATURE_DATE": "SIGNATURE_DATE",
    /**
     * value: "AGREEMENT_NAME"
     * @const
     */
    "AGREEMENT_NAME": "AGREEMENT_NAME",
    /**
     * value: "AGREEMENT_MESSAGE"
     * @const
     */
    "AGREEMENT_MESSAGE": "AGREEMENT_MESSAGE",
    /**
     * value: "TRANSACTION_ID"
     * @const
     */
    "TRANSACTION_ID": "TRANSACTION_ID",
    /**
     * value: "SIGNATURE_STAMP"
     * @const
     */
    "SIGNATURE_STAMP": "SIGNATURE_STAMP",
    /**
     * value: "PAYMENT"
     * @const
     */
    "PAYMENT": "PAYMENT",
    /**
     * value: "DIGITAL_SIGNATURE"
     * @const
     */
    "DIGITAL_SIGNATURE": "DIGITAL_SIGNATURE"  };

  /**
   * Allowed values for the <code>displayFormatType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DisplayFormatTypeEnum = {
    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",
    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",
    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER"  };

  /**
   * Allowed values for the <code>inputType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.InputTypeEnum = {
    /**
     * value: "TEXT_FIELD"
     * @const
     */
    "TEXT_FIELD": "TEXT_FIELD",
    /**
     * value: "MULTILINE"
     * @const
     */
    "MULTILINE": "MULTILINE",
    /**
     * value: "PASSWORD"
     * @const
     */
    "PASSWORD": "PASSWORD",
    /**
     * value: "RADIO"
     * @const
     */
    "RADIO": "RADIO",
    /**
     * value: "CHECKBOX"
     * @const
     */
    "CHECKBOX": "CHECKBOX",
    /**
     * value: "DROP_DOWN"
     * @const
     */
    "DROP_DOWN": "DROP_DOWN",
    /**
     * value: "LISTBOX"
     * @const
     */
    "LISTBOX": "LISTBOX",
    /**
     * value: "SIGNATURE"
     * @const
     */
    "SIGNATURE": "SIGNATURE",
    /**
     * value: "PDF_SIGNATURE"
     * @const
     */
    "PDF_SIGNATURE": "PDF_SIGNATURE",
    /**
     * value: "BUTTON"
     * @const
     */
    "BUTTON": "BUTTON",
    /**
     * value: "BLOCK"
     * @const
     */
    "BLOCK": "BLOCK",
    /**
     * value: "FILE_CHOOSER"
     * @const
     */
    "FILE_CHOOSER": "FILE_CHOOSER",
    /**
     * value: "COMB"
     * @const
     */
    "COMB": "COMB",
    /**
     * value: "INLINE_IMAGE"
     * @const
     */
    "INLINE_IMAGE": "INLINE_IMAGE",
    /**
     * value: "UNSUPPORTED"
     * @const
     */
    "UNSUPPORTED": "UNSUPPORTED"  };

  /**
   * Allowed values for the <code>origin</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OriginEnum = {
    /**
     * value: "AUTHORED"
     * @const
     */
    "AUTHORED": "AUTHORED",
    /**
     * value: "GENERATED"
     * @const
     */
    "GENERATED": "GENERATED",
    /**
     * value: "IMPORTED"
     * @const
     */
    "IMPORTED": "IMPORTED"  };

  /**
   * Allowed values for the <code>radioCheckType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RadioCheckTypeEnum = {
    /**
     * value: "CIRCLE"
     * @const
     */
    "CIRCLE": "CIRCLE",
    /**
     * value: "CHECK"
     * @const
     */
    "CHECK": "CHECK",
    /**
     * value: "CROSS"
     * @const
     */
    "CROSS": "CROSS",
    /**
     * value: "DIAMOND"
     * @const
     */
    "DIAMOND": "DIAMOND",
    /**
     * value: "SQUARE"
     * @const
     */
    "SQUARE": "SQUARE",
    /**
     * value: "STAR"
     * @const
     */
    "STAR": "STAR"  };

  /**
   * Allowed values for the <code>validation</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ValidationEnum = {
    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",
    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",
    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER",
    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",
    /**
     * value: "DATE_CUSTOM"
     * @const
     */
    "DATE_CUSTOM": "DATE_CUSTOM",
    /**
     * value: "TIME"
     * @const
     */
    "TIME": "TIME",
    /**
     * value: "ZIP"
     * @const
     */
    "ZIP": "ZIP",
    /**
     * value: "PHONE"
     * @const
     */
    "PHONE": "PHONE",
    /**
     * value: "SOCIAL_SEC"
     * @const
     */
    "SOCIAL_SEC": "SOCIAL_SEC",
    /**
     * value: "EMAIL"
     * @const
     */
    "EMAIL": "EMAIL",
    /**
     * value: "CURRENCY"
     * @const
     */
    "CURRENCY": "CURRENCY",
    /**
     * value: "PERCENT"
     * @const
     */
    "PERCENT": "PERCENT",
    /**
     * value: "FORMULA"
     * @const
     */
    "FORMULA": "FORMULA",
    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM",
    /**
     * value: "XFA_PICTURE"
     * @const
     */
    "XFA_PICTURE": "XFA_PICTURE"  };


  return exports;
}));


