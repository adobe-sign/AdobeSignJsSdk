/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.FormFieldConditionPredicate = factory(root.SwaggerJsClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The FormFieldConditionPredicate model module.
   * @module model/agreements/FormFieldConditionPredicate
   * @version 6.0.0
   */

  /**
   * Constructs a new <code>FormFieldConditionPredicate</code>.
   * A predicate used to determine whether the condtion succeeds
   * @alias module:model/agreements/FormFieldConditionPredicate
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>FormFieldConditionPredicate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/FormFieldConditionPredicate} obj Optional instance to populate.
   * @return {module:model/agreements/FormFieldConditionPredicate} The populated <code>FormFieldConditionPredicate</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('fieldLocationIndex')) {
        obj['fieldLocationIndex'] = ApiClient.convertToType(data['fieldLocationIndex'], 'Number');
      }
      if (data.hasOwnProperty('fieldName')) {
        obj['fieldName'] = ApiClient.convertToType(data['fieldName'], 'String');
      }
      if (data.hasOwnProperty('operator')) {
        obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'String');
      }
    }
    return obj;
  }

  /**
   * Index of the location of the form field used in the predicate
   * @member {Number} fieldLocationIndex
   */
  exports.prototype['fieldLocationIndex'] = undefined;
  /**
   * Name of the field whose value is the basis of predicate
   * @member {String} fieldName
   */
  exports.prototype['fieldName'] = undefined;
  /**
   * Operator to be applied on the value of the predicate field.
   * @member {module:model/agreements/FormFieldConditionPredicate.OperatorEnum} operator
   */
  exports.prototype['operator'] = undefined;
  /**
   * Value to compare against the value of the predicate's form field, using the specified operator
   * @member {String} value
   */
  exports.prototype['value'] = undefined;


  /**
   * Allowed values for the <code>operator</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OperatorEnum = {
    /**
     * value: "EQUALS"
     * @const
     */
    "EQUALS": "EQUALS",
    /**
     * value: "NOT_EQUALS"
     * @const
     */
    "NOT_EQUALS": "NOT_EQUALS",
    /**
     * value: "LESS_THAN"
     * @const
     */
    "LESS_THAN": "LESS_THAN",
    /**
     * value: "LESS_THAN_EQUALS"
     * @const
     */
    "LESS_THAN_EQUALS": "LESS_THAN_EQUALS",
    /**
     * value: "GREATER_THAN"
     * @const
     */
    "GREATER_THAN": "GREATER_THAN",
    /**
     * value: "GREATER_THAN_EQUALS"
     * @const
     */
    "GREATER_THAN_EQUALS": "GREATER_THAN_EQUALS",
    /**
     * value: "IN"
     * @const
     */
    "IN": "IN",
    /**
     * value: "NOT_IN"
     * @const
     */
    "NOT_IN": "NOT_IN",
    /**
     * value: "CONTAINS"
     * @const
     */
    "CONTAINS": "CONTAINS",
    /**
     * value: "NOT_CONTAINS"
     * @const
     */
    "NOT_CONTAINS": "NOT_CONTAINS"  };


  return exports;
}));


