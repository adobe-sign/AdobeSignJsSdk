/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/agreements/AgreementCcInfo', 'model/agreements/EmailOption', 'model/agreements/ExternalId', 'model/agreements/FileInfo', 'model/agreements/MergefieldInfo', 'model/agreements/OfflineDeviceInfo', 'model/agreements/ParticipantSetInfo', 'model/agreements/PostSignOption', 'model/agreements/SecurityOption', 'model/agreements/VaultingInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AgreementCcInfo'), require('./EmailOption'), require('./ExternalId'), require('./FileInfo'), require('./MergefieldInfo'), require('./OfflineDeviceInfo'), require('./ParticipantSetInfo'), require('./PostSignOption'), require('./SecurityOption'), require('./VaultingInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.AgreementCreationInfo = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.AgreementCcInfo, root.SwaggerJsClient.EmailOption, root.SwaggerJsClient.ExternalId, root.SwaggerJsClient.FileInfo, root.SwaggerJsClient.MergefieldInfo, root.SwaggerJsClient.OfflineDeviceInfo, root.SwaggerJsClient.ParticipantSetInfo, root.SwaggerJsClient.PostSignOption, root.SwaggerJsClient.SecurityOption, root.SwaggerJsClient.VaultingInfo);
  }
}(this, function(ApiClient, AgreementCcInfo, EmailOption, ExternalId, FileInfo, MergefieldInfo, OfflineDeviceInfo, ParticipantSetInfo, PostSignOption, SecurityOption, VaultingInfo) {
  'use strict';




  /**
   * The AgreementCreationInfo model module.
   * @module model/agreements/AgreementCreationInfo
   * @version 6.0.0
   */

  /**
   * Constructs a new <code>AgreementCreationInfo</code>.
   * @alias module:model/agreements/AgreementCreationInfo
   * @class
   */
  var exports = function() {
    var _this = this;


























  };

  /**
   * Constructs a <code>AgreementCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/AgreementCreationInfo} obj Optional instance to populate.
   * @return {module:model/agreements/AgreementCreationInfo} The populated <code>AgreementCreationInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('ccs')) {
        obj['ccs'] = ApiClient.convertToType(data['ccs'], [AgreementCcInfo]);
      }
      if (data.hasOwnProperty('createdDate')) {
        obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
      }
      if (data.hasOwnProperty('deviceInfo')) {
        obj['deviceInfo'] = OfflineDeviceInfo.constructFromObject(data['deviceInfo']);
      }
      if (data.hasOwnProperty('documentVisibilityEnabled')) {
        obj['documentVisibilityEnabled'] = ApiClient.convertToType(data['documentVisibilityEnabled'], 'Boolean');
      }
      if (data.hasOwnProperty('emailOption')) {
        obj['emailOption'] = EmailOption.constructFromObject(data['emailOption']);
      }
      if (data.hasOwnProperty('expirationTime')) {
        obj['expirationTime'] = ApiClient.convertToType(data['expirationTime'], 'Date');
      }
      if (data.hasOwnProperty('externalId')) {
        obj['externalId'] = ExternalId.constructFromObject(data['externalId']);
      }
      if (data.hasOwnProperty('fileInfos')) {
        obj['fileInfos'] = ApiClient.convertToType(data['fileInfos'], [FileInfo]);
      }
      if (data.hasOwnProperty('firstReminderDelay')) {
        obj['firstReminderDelay'] = ApiClient.convertToType(data['firstReminderDelay'], 'Number');
      }
      if (data.hasOwnProperty('formFieldLayerTemplates')) {
        obj['formFieldLayerTemplates'] = ApiClient.convertToType(data['formFieldLayerTemplates'], [FileInfo]);
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('locale')) {
        obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
      }
      if (data.hasOwnProperty('mergeFieldInfo')) {
        obj['mergeFieldInfo'] = ApiClient.convertToType(data['mergeFieldInfo'], [MergefieldInfo]);
      }
      if (data.hasOwnProperty('message')) {
        obj['message'] = ApiClient.convertToType(data['message'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('participantSetsInfo')) {
        obj['participantSetsInfo'] = ApiClient.convertToType(data['participantSetsInfo'], [ParticipantSetInfo]);
      }
      if (data.hasOwnProperty('postSignOption')) {
        obj['postSignOption'] = PostSignOption.constructFromObject(data['postSignOption']);
      }
      if (data.hasOwnProperty('reminderFrequency')) {
        obj['reminderFrequency'] = ApiClient.convertToType(data['reminderFrequency'], 'String');
      }
      if (data.hasOwnProperty('securityOption')) {
        obj['securityOption'] = SecurityOption.constructFromObject(data['securityOption']);
      }
      if (data.hasOwnProperty('senderEmail')) {
        obj['senderEmail'] = ApiClient.convertToType(data['senderEmail'], 'String');
      }
      if (data.hasOwnProperty('signatureType')) {
        obj['signatureType'] = ApiClient.convertToType(data['signatureType'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('vaultingInfo')) {
        obj['vaultingInfo'] = VaultingInfo.constructFromObject(data['vaultingInfo']);
      }
      if (data.hasOwnProperty('workflowId')) {
        obj['workflowId'] = ApiClient.convertToType(data['workflowId'], 'String');
      }
    }
    return obj;
  }

  /**
   * A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.
   * @member {Array.<module:model/agreements/AgreementCcInfo>} ccs
   */
  exports.prototype['ccs'] = undefined;
  /**
   * Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
   * @member {Date} createdDate
   */
  exports.prototype['createdDate'] = undefined;
  /**
   * Device info of the offline device. It should only be provided in case of offline agreement creation.
   * @member {module:model/agreements/OfflineDeviceInfo} deviceInfo
   */
  exports.prototype['deviceInfo'] = undefined;
  /**
   * If set to true, enable limited document visibility. Should not be provided in offline agreement creation.
   * @member {Boolean} documentVisibilityEnabled
   */
  exports.prototype['documentVisibilityEnabled'] = undefined;
  /**
   * Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement.
   * @member {module:model/agreements/EmailOption} emailOption
   */
  exports.prototype['emailOption'] = undefined;
  /**
   * Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.
   * @member {Date} expirationTime
   */
  exports.prototype['expirationTime'] = undefined;
  /**
   * An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation.
   * @member {module:model/agreements/ExternalId} externalId
   */
  exports.prototype['externalId'] = undefined;
  /**
   * A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
   * @member {Array.<module:model/agreements/FileInfo>} fileInfos
   */
  exports.prototype['fileInfos'] = undefined;
  /**
   * Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.
   * @member {Number} firstReminderDelay
   */
  exports.prototype['firstReminderDelay'] = undefined;
  /**
   * Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
   * @member {Array.<module:model/agreements/FileInfo>} formFieldLayerTemplates
   */
  exports.prototype['formFieldLayerTemplates'] = undefined;
  /**
   * The unique identifier of the agreement.If provided in POST, it will simply be ignored
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
   * @member {String} locale
   */
  exports.prototype['locale'] = undefined;
  /**
   * Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
   * @member {Array.<module:model/agreements/MergefieldInfo>} mergeFieldInfo
   */
  exports.prototype['mergeFieldInfo'] = undefined;
  /**
   * An optional message to the participants, describing what is being sent or why their signature is required
   * @member {String} message
   */
  exports.prototype['message'] = undefined;
  /**
   * The name of the agreement that will be used to identify it, in emails, website and other places
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc ), the action is considered as the action taken by whole participation set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document
   * @member {Array.<module:model/agreements/ParticipantSetInfo>} participantSetsInfo
   */
  exports.prototype['participantSetsInfo'] = undefined;
  /**
   * URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.
   * @member {module:model/agreements/PostSignOption} postSignOption
   */
  exports.prototype['postSignOption'] = undefined;
  /**
   * Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.
   * @member {module:model/agreements/AgreementCreationInfo.ReminderFrequencyEnum} reminderFrequency
   */
  exports.prototype['reminderFrequency'] = undefined;
  /**
   * Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.
   * @member {module:model/agreements/SecurityOption} securityOption
   */
  exports.prototype['securityOption'] = undefined;
  /**
   * Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored
   * @member {String} senderEmail
   */
  exports.prototype['senderEmail'] = undefined;
  /**
   * Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>, WRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system
   * @member {module:model/agreements/AgreementCreationInfo.SignatureTypeEnum} signatureType
   */
  exports.prototype['signatureType'] = undefined;
  /**
   * The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID
   * @member {module:model/agreements/AgreementCreationInfo.StateEnum} state
   */
  exports.prototype['state'] = undefined;
  /**
   * This is a server generated attribute which provides the detailed status of an agreement.
   * @member {module:model/agreements/AgreementCreationInfo.StatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * Vaulting properties that allows Adobe Sign to securely store documents with a vault provider
   * @member {module:model/agreements/VaultingInfo} vaultingInfo
   */
  exports.prototype['vaultingInfo'] = undefined;
  /**
   * The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.
   * @member {String} workflowId
   */
  exports.prototype['workflowId'] = undefined;


  /**
   * Allowed values for the <code>reminderFrequency</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ReminderFrequencyEnum = {
    /**
     * value: "DAILY_UNTIL_SIGNED"
     * @const
     */
    "DAILY_UNTIL_SIGNED": "DAILY_UNTIL_SIGNED",
    /**
     * value: "WEEKDAILY_UNTIL_SIGNED"
     * @const
     */
    "WEEKDAILY_UNTIL_SIGNED": "WEEKDAILY_UNTIL_SIGNED",
    /**
     * value: "EVERY_OTHER_DAY_UNTIL_SIGNED"
     * @const
     */
    "EVERY_OTHER_DAY_UNTIL_SIGNED": "EVERY_OTHER_DAY_UNTIL_SIGNED",
    /**
     * value: "EVERY_THIRD_DAY_UNTIL_SIGNED"
     * @const
     */
    "EVERY_THIRD_DAY_UNTIL_SIGNED": "EVERY_THIRD_DAY_UNTIL_SIGNED",
    /**
     * value: "EVERY_FIFTH_DAY_UNTIL_SIGNED"
     * @const
     */
    "EVERY_FIFTH_DAY_UNTIL_SIGNED": "EVERY_FIFTH_DAY_UNTIL_SIGNED",
    /**
     * value: "WEEKLY_UNTIL_SIGNED"
     * @const
     */
    "WEEKLY_UNTIL_SIGNED": "WEEKLY_UNTIL_SIGNED",
    /**
     * value: "ONCE"
     * @const
     */
    "ONCE": "ONCE"  };

  /**
   * Allowed values for the <code>signatureType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SignatureTypeEnum = {
    /**
     * value: "ESIGN"
     * @const
     */
    "ESIGN": "ESIGN",
    /**
     * value: "WRITTEN"
     * @const
     */
    "WRITTEN": "WRITTEN"  };

  /**
   * Allowed values for the <code>state</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StateEnum = {
    /**
     * value: "AUTHORING"
     * @const
     */
    "AUTHORING": "AUTHORING",
    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",
    /**
     * value: "IN_PROCESS"
     * @const
     */
    "IN_PROCESS": "IN_PROCESS"  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "OUT_FOR_SIGNATURE"
     * @const
     */
    "OUT_FOR_SIGNATURE": "OUT_FOR_SIGNATURE",
    /**
     * value: "OUT_FOR_DELIVERY"
     * @const
     */
    "OUT_FOR_DELIVERY": "OUT_FOR_DELIVERY",
    /**
     * value: "OUT_FOR_ACCEPTANCE"
     * @const
     */
    "OUT_FOR_ACCEPTANCE": "OUT_FOR_ACCEPTANCE",
    /**
     * value: "OUT_FOR_FORM_FILLING"
     * @const
     */
    "OUT_FOR_FORM_FILLING": "OUT_FOR_FORM_FILLING",
    /**
     * value: "OUT_FOR_APPROVAL"
     * @const
     */
    "OUT_FOR_APPROVAL": "OUT_FOR_APPROVAL",
    /**
     * value: "AUTHORING"
     * @const
     */
    "AUTHORING": "AUTHORING",
    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",
    /**
     * value: "SIGNED"
     * @const
     */
    "SIGNED": "SIGNED",
    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",
    /**
     * value: "DELIVERED"
     * @const
     */
    "DELIVERED": "DELIVERED",
    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED",
    /**
     * value: "FORM_FILLED"
     * @const
     */
    "FORM_FILLED": "FORM_FILLED",
    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",
    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",
    /**
     * value: "PREFILL"
     * @const
     */
    "PREFILL": "PREFILL",
    /**
     * value: "WIDGET_WAITING_FOR_VERIFICATION"
     * @const
     */
    "WIDGET_WAITING_FOR_VERIFICATION": "WIDGET_WAITING_FOR_VERIFICATION",
    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",
    /**
     * value: "DOCUMENTS_NOT_YET_PROCESSED"
     * @const
     */
    "DOCUMENTS_NOT_YET_PROCESSED": "DOCUMENTS_NOT_YET_PROCESSED",
    /**
     * value: "WAITING_FOR_FAXIN"
     * @const
     */
    "WAITING_FOR_FAXIN": "WAITING_FOR_FAXIN",
    /**
     * value: "WAITING_FOR_VERIFICATION"
     * @const
     */
    "WAITING_FOR_VERIFICATION": "WAITING_FOR_VERIFICATION"  };


  return exports;
}));


