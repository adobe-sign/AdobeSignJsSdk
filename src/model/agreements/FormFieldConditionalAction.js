/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/agreements/FormFieldConditionPredicate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FormFieldConditionPredicate'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.FormFieldConditionalAction = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.FormFieldConditionPredicate);
  }
}(this, function(ApiClient, FormFieldConditionPredicate) {
  'use strict';




  /**
   * The FormFieldConditionalAction model module.
   * @module model/agreements/FormFieldConditionalAction
   * @version 6.0.0
   */

  /**
   * Constructs a new <code>FormFieldConditionalAction</code>.
   * Conditional actions to perfom on this form field.
   * @alias module:model/agreements/FormFieldConditionalAction
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>FormFieldConditionalAction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/FormFieldConditionalAction} obj Optional instance to populate.
   * @return {module:model/agreements/FormFieldConditionalAction} The populated <code>FormFieldConditionalAction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('action')) {
        obj['action'] = ApiClient.convertToType(data['action'], 'String');
      }
      if (data.hasOwnProperty('anyOrAll')) {
        obj['anyOrAll'] = ApiClient.convertToType(data['anyOrAll'], 'String');
      }
      if (data.hasOwnProperty('predicates')) {
        obj['predicates'] = ApiClient.convertToType(data['predicates'], [FormFieldConditionPredicate]);
      }
    }
    return obj;
  }

  /**
   * Action to show/hide the form field is to be taken on the basis of evaluation of conditions.
   * @member {module:model/agreements/FormFieldConditionalAction.ActionEnum} action
   */
  exports.prototype['action'] = undefined;
  /**
   * It indicates if any one of the conditions or all of them have to be true.
   * @member {module:model/agreements/FormFieldConditionalAction.AnyOrAllEnum} anyOrAll
   */
  exports.prototype['anyOrAll'] = undefined;
  /**
   * The predicates to be evaluated in order to determine whether this condition is true
   * @member {Array.<module:model/agreements/FormFieldConditionPredicate>} predicates
   */
  exports.prototype['predicates'] = undefined;


  /**
   * Allowed values for the <code>action</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ActionEnum = {
    /**
     * value: "SHOW"
     * @const
     */
    "SHOW": "SHOW",
    /**
     * value: "HIDE"
     * @const
     */
    "HIDE": "HIDE",
    /**
     * value: "DISABLE"
     * @const
     */
    "DISABLE": "DISABLE",
    /**
     * value: "ENABLE"
     * @const
     */
    "ENABLE": "ENABLE"  };

  /**
   * Allowed values for the <code>anyOrAll</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AnyOrAllEnum = {
    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",
    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY"  };


  return exports;
}));


