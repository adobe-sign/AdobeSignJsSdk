/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['model/ApiClient', 'model/libraryDocuments/DocumentImageUrlsInfo', 'model/libraryDocuments/Documents', 'model/libraryDocuments/LibraryDocumentCreationInfoV6', 'model/libraryDocuments/LibraryDocumentCreationResponse', 'model/libraryDocuments/LibraryDocumentEventList', 'model/libraryDocuments/LibraryDocumentInfo', 'model/libraryDocuments/LibraryDocumentStateInfo', 'model/libraryDocuments/LibraryDocumentViewResponse', 'model/libraryDocuments/LibraryDocuments', 'model/libraryDocuments/LibraryViewInfo', 'model/libraryDocuments/Note', 'model/libraryDocuments/VisibilityInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../model/ApiClient'), require('../model/libraryDocuments/DocumentImageUrlsInfo'), require('../model/libraryDocuments/Documents'), require('../model/libraryDocuments/LibraryDocumentCreationInfoV6'), require('../model/libraryDocuments/LibraryDocumentCreationResponse'), require('../model/libraryDocuments/LibraryDocumentEventList'), require('../model/libraryDocuments/LibraryDocumentInfo'), require('../model/libraryDocuments/LibraryDocumentStateInfo'), require('../model/libraryDocuments/LibraryDocumentViewResponse'), require('../model/libraryDocuments/LibraryDocuments'), require('../model/libraryDocuments/LibraryViewInfo'), require('../model/libraryDocuments/Note'), require('../model/libraryDocuments/VisibilityInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.LibraryDocumentsApi = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.DocumentImageUrlsInfo, root.SwaggerJsClient.Documents, root.SwaggerJsClient.LibraryDocumentCreationInfoV6, root.SwaggerJsClient.LibraryDocumentCreationResponse, root.SwaggerJsClient.LibraryDocumentEventList, root.SwaggerJsClient.LibraryDocumentInfo, root.SwaggerJsClient.LibraryDocumentStateInfo, root.SwaggerJsClient.LibraryDocumentViewResponse, root.SwaggerJsClient.LibraryDocuments, root.SwaggerJsClient.LibraryViewInfo, root.SwaggerJsClient.Note, root.SwaggerJsClient.VisibilityInfo);
  }
}(this, function(ApiClient, DocumentImageUrlsInfo, Documents, LibraryDocumentCreationInfoV6, LibraryDocumentCreationResponse, LibraryDocumentEventList, LibraryDocumentInfo, LibraryDocumentStateInfo, LibraryDocumentViewResponse, LibraryDocuments, LibraryViewInfo, Note, VisibilityInfo) {
  'use strict';

  /**
   * LibraryDocuments service.
   * @module api/LibraryDocumentsApi
   * @version 6.0.0
   */

  /**
   * Constructs a new LibraryDocumentsApi. 
   * @alias module:api/LibraryDocumentsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates a template that is placed in the library of the user for reuse.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {module:model/libraryDocuments/LibraryDocumentCreationInfoV6} libraryDocumentInfo Information about the library document that you want to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/libraryDocuments/LibraryDocumentCreationResponse} and HTTP response
     */
    this.createLibraryDocumentWithHttpInfo = function(authorization, libraryDocumentInfo, opts) {
      opts = opts || {};
      var postBody = libraryDocumentInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createLibraryDocument");
      }

      // verify the required parameter 'libraryDocumentInfo' is set
      if (libraryDocumentInfo === undefined || libraryDocumentInfo === null) {
        throw new Error("Missing the required parameter 'libraryDocumentInfo' when calling createLibraryDocument");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LibraryDocumentCreationResponse;

      return this.apiClient.callApi(
        '/libraryDocuments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a template that is placed in the library of the user for reuse.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {module:model/libraryDocuments/LibraryDocumentCreationInfoV6} libraryDocumentInfo Information about the library document that you want to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/libraryDocuments/LibraryDocumentCreationResponse}
     */
    this.createLibraryDocument = function(authorization, libraryDocumentInfo, opts) {
      return this.createLibraryDocumentWithHttpInfo(authorization, libraryDocumentInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the latest state view url of a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt; - library document read is always required&lt;/li&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;user_login&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;user_login&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;user_login&lt;/a&gt; - Required additionally if the autoLoginUser parameter is set to true&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/LibraryViewInfo} libraryViewInfo Name of the required view and its desired configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/libraryDocuments/LibraryDocumentViewResponse} and HTTP response
     */
    this.createLibraryDocumentViewWithHttpInfo = function(authorization, libraryDocumentId, libraryViewInfo, opts) {
      opts = opts || {};
      var postBody = libraryViewInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createLibraryDocumentView");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling createLibraryDocumentView");
      }

      // verify the required parameter 'libraryViewInfo' is set
      if (libraryViewInfo === undefined || libraryViewInfo === null) {
        throw new Error("Missing the required parameter 'libraryViewInfo' when calling createLibraryDocumentView");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LibraryDocumentViewResponse;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/views', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the latest state view url of a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt; - library document read is always required&lt;/li&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;user_login&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;user_login&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;user_login&lt;/a&gt; - Required additionally if the autoLoginUser parameter is set to true&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/LibraryViewInfo} libraryViewInfo Name of the required view and its desired configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/libraryDocuments/LibraryDocumentViewResponse}
     */
    this.createLibraryDocumentView = function(authorization, libraryDocumentId, libraryViewInfo, opts) {
      return this.createLibraryDocumentViewWithHttpInfo(authorization, libraryDocumentId, libraryViewInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the combined document associated with a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {Boolean} opts.attachAuditReport When set to YES attach an audit report to the library document PDF. Default value will be false.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
     */
    this.getCombinedDocumentWithHttpInfo = function(authorization, libraryDocumentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCombinedDocument");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling getCombinedDocument");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
        'attachAuditReport': opts['attachAuditReport'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/pdf', 'application/pdf;encoding=base64'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/combinedDocument', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the combined document associated with a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {Boolean} opts.attachAuditReport When set to YES attach an audit report to the library document PDF. Default value will be false.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
     */
    this.getCombinedDocument = function(authorization, libraryDocumentId, opts) {
      return this.getCombinedDocumentWithHttpInfo(authorization, libraryDocumentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the IDs of the documents associated with library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.versionId The version identifier of library_document as provided by the API which retrieves information of a specific library document. If not provided then latest version will be used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/libraryDocuments/Documents} and HTTP response
     */
    this.getDocumentsWithHttpInfo = function(authorization, libraryDocumentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getDocuments");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling getDocuments");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
        'versionId': opts['versionId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Documents;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the IDs of the documents associated with library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.versionId The version identifier of library_document as provided by the API which retrieves information of a specific library document. If not provided then latest version will be used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/libraryDocuments/Documents}
     */
    this.getDocuments = function(authorization, libraryDocumentId, opts) {
      return this.getDocumentsWithHttpInfo(authorization, libraryDocumentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the events information for a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/libraryDocuments/LibraryDocumentEventList} and HTTP response
     */
    this.getEventsWithHttpInfo = function(authorization, libraryDocumentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEvents");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling getEvents");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LibraryDocumentEventList;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the events information for a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/libraryDocuments/LibraryDocumentEventList}
     */
    this.getEvents = function(authorization, libraryDocumentId, opts) {
      return this.getEventsWithHttpInfo(authorization, libraryDocumentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves data entered into the interactive form fields of the library document.
     * This API can only be called by the creator of the library document
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
     */
    this.getFormDataWithHttpInfo = function(authorization, libraryDocumentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getFormData");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling getFormData");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/csv'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/formData', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves data entered into the interactive form fields of the library document.
     * This API can only be called by the creator of the library document
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
     */
    this.getFormData = function(authorization, libraryDocumentId, opts) {
      return this.getFormDataWithHttpInfo(authorization, libraryDocumentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the file stream of a document of library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {String} documentId The document identifier, as retrieved from the API which fetches the documents of a specified library document
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
     */
    this.getLibraryDocumentWithHttpInfo = function(authorization, libraryDocumentId, documentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLibraryDocument");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling getLibraryDocument");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getLibraryDocument");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId,
        'documentId': documentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/pdf', 'application/pdf;encoding=base64'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/documents/{documentId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the file stream of a document of library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {String} documentId The document identifier, as retrieved from the API which fetches the documents of a specified library document
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
     */
    this.getLibraryDocument = function(authorization, libraryDocumentId, documentId, opts) {
      return this.getLibraryDocumentWithHttpInfo(authorization, libraryDocumentId, documentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the audit trail associated with a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
     */
    this.getLibraryDocumentAuditTrailWithHttpInfo = function(authorization, libraryDocumentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLibraryDocumentAuditTrail");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling getLibraryDocumentAuditTrail");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/pdf', 'application/pdf;encoding=base64'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/auditTrail', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the audit trail associated with a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
     */
    this.getLibraryDocumentAuditTrail = function(authorization, libraryDocumentId, opts) {
      return this.getLibraryDocumentAuditTrailWithHttpInfo(authorization, libraryDocumentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves image urls of all visible pages of a document associated with a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {String} documentId The document identifier, as retrieved from the API which fetches the documents of a specified library document
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.imageSizes A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. 
     * @param {Number} opts.startPage Start of page number range for which imageUrls are requested. Starting page number should be greater than 0.
     * @param {Number} opts.endPage End of page number range for which imageUrls are requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/libraryDocuments/DocumentImageUrlsInfo} and HTTP response
     */
    this.getLibraryDocumentImageUrlsWithHttpInfo = function(authorization, libraryDocumentId, documentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLibraryDocumentImageUrls");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling getLibraryDocumentImageUrls");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getLibraryDocumentImageUrls");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId,
        'documentId': documentId
      };
      var queryParams = {
        'imageSizes': opts['imageSizes'],
        'startPage': opts['startPage'],
        'endPage': opts['endPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DocumentImageUrlsInfo;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/documents/{documentId}/imageUrls', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves image urls of all visible pages of a document associated with a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {String} documentId The document identifier, as retrieved from the API which fetches the documents of a specified library document
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.imageSizes A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. 
     * @param {Number} opts.startPage Start of page number range for which imageUrls are requested. Starting page number should be greater than 0.
     * @param {Number} opts.endPage End of page number range for which imageUrls are requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/libraryDocuments/DocumentImageUrlsInfo}
     */
    this.getLibraryDocumentImageUrls = function(authorization, libraryDocumentId, documentId, opts) {
      return this.getLibraryDocumentImageUrlsWithHttpInfo(authorization, libraryDocumentId, documentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the details of a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/libraryDocuments/LibraryDocumentCreationInfoV6} and HTTP response
     */
    this.getLibraryDocumentInfoWithHttpInfo = function(authorization, libraryDocumentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLibraryDocumentInfo");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling getLibraryDocumentInfo");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LibraryDocumentCreationInfoV6;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the details of a library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/libraryDocuments/LibraryDocumentCreationInfoV6}
     */
    this.getLibraryDocumentInfo = function(authorization, libraryDocumentId, opts) {
      return this.getLibraryDocumentInfoWithHttpInfo(authorization, libraryDocumentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the latest note of a library document for the API user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/libraryDocuments/Note} and HTTP response
     */
    this.getLibraryDocumentNoteForApiUserWithHttpInfo = function(authorization, libraryDocumentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLibraryDocumentNoteForApiUser");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling getLibraryDocumentNoteForApiUser");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Note;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/me/note', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the latest note of a library document for the API user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/libraryDocuments/Note}
     */
    this.getLibraryDocumentNoteForApiUser = function(authorization, libraryDocumentId, opts) {
      return this.getLibraryDocumentNoteForApiUserWithHttpInfo(authorization, libraryDocumentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves library documents for a user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {Boolean} opts.showHiddenLibraryDocuments A query parameter to fetch all the hidden library documents along with the visible library documents. Default value is false.
     * @param {String} opts.cursor Used to navigate through the pages. If not provided, returns the first page.
     * @param {Number} opts.pageSize Number of intended items in the response page. If not provided, it is decided by the application settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/libraryDocuments/LibraryDocuments} and HTTP response
     */
    this.getLibraryDocumentsWithHttpInfo = function(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLibraryDocuments");
      }


      var pathParams = {
      };
      var queryParams = {
        'showHiddenLibraryDocuments': opts['showHiddenLibraryDocuments'],
        'cursor': opts['cursor'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LibraryDocuments;

      return this.apiClient.callApi(
        '/libraryDocuments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves library documents for a user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {Boolean} opts.showHiddenLibraryDocuments A query parameter to fetch all the hidden library documents along with the visible library documents. Default value is false.
     * @param {String} opts.cursor Used to navigate through the pages. If not provided, returns the first page.
     * @param {Number} opts.pageSize Number of intended items in the response page. If not provided, it is decided by the application settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/libraryDocuments/LibraryDocuments}
     */
    this.getLibraryDocuments = function(authorization, opts) {
      return this.getLibraryDocumentsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the library document.
     * Currently status, name, sharingMode and templateTypes of the library document can only be updated.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/LibraryDocumentInfo} libraryDocumentInfo Information about the library document that you want to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateLibraryDocumentWithHttpInfo = function(authorization, ifMatch, libraryDocumentId, libraryDocumentInfo, opts) {
      opts = opts || {};
      var postBody = libraryDocumentInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateLibraryDocument");
      }

      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateLibraryDocument");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling updateLibraryDocument");
      }

      // verify the required parameter 'libraryDocumentInfo' is set
      if (libraryDocumentInfo === undefined || libraryDocumentInfo === null) {
        throw new Error("Missing the required parameter 'libraryDocumentInfo' when calling updateLibraryDocument");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-Match': ifMatch
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the library document.
     * Currently status, name, sharingMode and templateTypes of the library document can only be updated.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/LibraryDocumentInfo} libraryDocumentInfo Information about the library document that you want to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateLibraryDocument = function(authorization, ifMatch, libraryDocumentId, libraryDocumentInfo, opts) {
      return this.updateLibraryDocumentWithHttpInfo(authorization, ifMatch, libraryDocumentId, libraryDocumentInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the latest note of a library document for the API user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/Note} note The note to be associated with the library document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateLibraryDocumentNoteForApiUserWithHttpInfo = function(authorization, libraryDocumentId, note, opts) {
      opts = opts || {};
      var postBody = note;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateLibraryDocumentNoteForApiUser");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling updateLibraryDocumentNoteForApiUser");
      }

      // verify the required parameter 'note' is set
      if (note === undefined || note === null) {
        throw new Error("Missing the required parameter 'note' when calling updateLibraryDocumentNoteForApiUser");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/me/note', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the latest note of a library document for the API user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/Note} note The note to be associated with the library document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateLibraryDocumentNoteForApiUser = function(authorization, libraryDocumentId, note, opts) {
      return this.updateLibraryDocumentNoteForApiUserWithHttpInfo(authorization, libraryDocumentId, note, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the library document&#39;s state.
     * Currently state can be changed from AUTHORING to ACTIVE.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/LibraryDocumentStateInfo} libraryDocumentStateInfo Information about the state of library document to which you want to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateLibraryDocumentStateWithHttpInfo = function(authorization, ifMatch, libraryDocumentId, libraryDocumentStateInfo, opts) {
      opts = opts || {};
      var postBody = libraryDocumentStateInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateLibraryDocumentState");
      }

      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateLibraryDocumentState");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling updateLibraryDocumentState");
      }

      // verify the required parameter 'libraryDocumentStateInfo' is set
      if (libraryDocumentStateInfo === undefined || libraryDocumentStateInfo === null) {
        throw new Error("Missing the required parameter 'libraryDocumentStateInfo' when calling updateLibraryDocumentState");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-Match': ifMatch
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/state', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the library document&#39;s state.
     * Currently state can be changed from AUTHORING to ACTIVE.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/LibraryDocumentStateInfo} libraryDocumentStateInfo Information about the state of library document to which you want to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateLibraryDocumentState = function(authorization, ifMatch, libraryDocumentId, libraryDocumentStateInfo, opts) {
      return this.updateLibraryDocumentStateWithHttpInfo(authorization, ifMatch, libraryDocumentId, libraryDocumentStateInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the visibility of library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/VisibilityInfo} visibilityInfo Information to update visibility of agreement
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateLibraryDocumentVisibilityWithHttpInfo = function(authorization, libraryDocumentId, visibilityInfo, opts) {
      opts = opts || {};
      var postBody = visibilityInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateLibraryDocumentVisibility");
      }

      // verify the required parameter 'libraryDocumentId' is set
      if (libraryDocumentId === undefined || libraryDocumentId === null) {
        throw new Error("Missing the required parameter 'libraryDocumentId' when calling updateLibraryDocumentVisibility");
      }

      // verify the required parameter 'visibilityInfo' is set
      if (visibilityInfo === undefined || visibilityInfo === null) {
        throw new Error("Missing the required parameter 'visibilityInfo' when calling updateLibraryDocumentVisibility");
      }


      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/me/visibility', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the visibility of library document.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;library_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;library_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} libraryDocumentId The document identifier, as retrieved from the API to fetch library documents.
     * @param {module:model/libraryDocuments/VisibilityInfo} visibilityInfo Information to update visibility of agreement
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateLibraryDocumentVisibility = function(authorization, libraryDocumentId, visibilityInfo, opts) {
      return this.updateLibraryDocumentVisibilityWithHttpInfo(authorization, libraryDocumentId, visibilityInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
