/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['model/ApiClient', 'model/widgets/DetailedWidgetParticipantSetInfo', 'model/widgets/Note', 'model/widgets/ParticipantSecurityOption', 'model/widgets/ShareCreationInfoList', 'model/widgets/ShareCreationResponseList', 'model/widgets/UserWidgets', 'model/widgets/VisibilityInfo', 'model/widgets/WidgetAgreements', 'model/widgets/WidgetCreationInfoV6', 'model/widgets/WidgetCreationResponse', 'model/widgets/WidgetDocuments', 'model/widgets/WidgetDocumentsImageUrlsInfo', 'model/widgets/WidgetEventList', 'model/widgets/WidgetInfo', 'model/widgets/WidgetMembersInfo', 'model/widgets/WidgetStateInfo', 'model/widgets/WidgetViewInfo', 'model/widgets/WidgetViews'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../model/ApiClient'), require('../model/widgets/DetailedWidgetParticipantSetInfo'), require('../model/widgets/Note'), require('../model/widgets/ParticipantSecurityOption'), require('../model/widgets/ShareCreationInfoList'), require('../model/widgets/ShareCreationResponseList'), require('../model/widgets/UserWidgets'), require('../model/widgets/VisibilityInfo'), require('../model/widgets/WidgetAgreements'), require('../model/widgets/WidgetCreationInfoV6'), require('../model/widgets/WidgetCreationResponse'), require('../model/widgets/WidgetDocuments'), require('../model/widgets/WidgetDocumentsImageUrlsInfo'), require('../model/widgets/WidgetEventList'), require('../model/widgets/WidgetInfo'), require('../model/widgets/WidgetMembersInfo'), require('../model/widgets/WidgetStateInfo'), require('../model/widgets/WidgetViewInfo'), require('../model/widgets/WidgetViews'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerJsClient) {
      root.SwaggerJsClient = {};
    }
    root.SwaggerJsClient.WidgetsApi = factory(root.SwaggerJsClient.ApiClient, root.SwaggerJsClient.DetailedWidgetParticipantSetInfo, root.SwaggerJsClient.Note, root.SwaggerJsClient.ParticipantSecurityOption, root.SwaggerJsClient.ShareCreationInfoList, root.SwaggerJsClient.ShareCreationResponseList, root.SwaggerJsClient.UserWidgets, root.SwaggerJsClient.VisibilityInfo, root.SwaggerJsClient.WidgetAgreements, root.SwaggerJsClient.WidgetCreationInfoV6, root.SwaggerJsClient.WidgetCreationResponse, root.SwaggerJsClient.WidgetDocuments, root.SwaggerJsClient.WidgetDocumentsImageUrlsInfo, root.SwaggerJsClient.WidgetEventList, root.SwaggerJsClient.WidgetInfo, root.SwaggerJsClient.WidgetMembersInfo, root.SwaggerJsClient.WidgetStateInfo, root.SwaggerJsClient.WidgetViewInfo, root.SwaggerJsClient.WidgetViews);
  }
}(this, function(ApiClient, DetailedWidgetParticipantSetInfo, Note, ParticipantSecurityOption, ShareCreationInfoList, ShareCreationResponseList, UserWidgets, VisibilityInfo, WidgetAgreements, WidgetCreationInfoV6, WidgetCreationResponse, WidgetDocuments, WidgetDocumentsImageUrlsInfo, WidgetEventList, WidgetInfo, WidgetMembersInfo, WidgetStateInfo, WidgetViewInfo, WidgetViews) {
  'use strict';

  /**
   * Widgets service.
   * @module api/WidgetsApi
   * @version 6.0.0
   */

  /**
   * Constructs a new WidgetsApi. 
   * @alias module:api/WidgetsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Share a widget with someone.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/ShareCreationInfoList} shareCreationInfoList List of agreement share creation information objects.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/ShareCreationResponseList} and HTTP response
     */
    this.createShareOnWidgetWithHttpInfo = function(authorization, widgetId, shareCreationInfoList, opts) {
      opts = opts || {};
      var postBody = shareCreationInfoList;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createShareOnWidget");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling createShareOnWidget");
      }

      // verify the required parameter 'shareCreationInfoList' is set
      if (shareCreationInfoList === undefined || shareCreationInfoList === null) {
        throw new Error("Missing the required parameter 'shareCreationInfoList' when calling createShareOnWidget");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ShareCreationResponseList;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/members/share', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Share a widget with someone.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/ShareCreationInfoList} shareCreationInfoList List of agreement share creation information objects.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/ShareCreationResponseList}
     */
    this.createShareOnWidget = function(authorization, widgetId, shareCreationInfoList, opts) {
      return this.createShareOnWidgetWithHttpInfo(authorization, widgetId, shareCreationInfoList, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a widget and and returns the widgetId in the response to the client.
     * This is a primary endpoint which is used to create a new widget. You can create a widget in one of the 3 mentioned states: a) &lt;b&gt;DRAFT&lt;/b&gt; - to incrementally build the widget, b) &lt;b&gt;AUTHORING&lt;/b&gt; - to add/edit form fields in the widget, c) &lt;b&gt;ACTIVE&lt;/b&gt; - to immediately host the widget. You can use the PUT /widgets/{widgetId}/state endpoint to transition a widget between the above mentioned states. An allowed transition would follow the any of the following sequences: DRAFT-&gt;AUTHORING-&gt;ACTIVE, ACTIVE&lt;-&gt;INACTIVE, DRAFT-&gt;CANCELLED.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {module:model/widgets/WidgetCreationInfoV6} widgetInfo Information about the widget that you want to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/WidgetCreationResponse} and HTTP response
     */
    this.createWidgetWithHttpInfo = function(authorization, widgetInfo, opts) {
      opts = opts || {};
      var postBody = widgetInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createWidget");
      }

      // verify the required parameter 'widgetInfo' is set
      if (widgetInfo === undefined || widgetInfo === null) {
        throw new Error("Missing the required parameter 'widgetInfo' when calling createWidget");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WidgetCreationResponse;

      return this.apiClient.callApi(
        '/widgets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a widget and and returns the widgetId in the response to the client.
     * This is a primary endpoint which is used to create a new widget. You can create a widget in one of the 3 mentioned states: a) &lt;b&gt;DRAFT&lt;/b&gt; - to incrementally build the widget, b) &lt;b&gt;AUTHORING&lt;/b&gt; - to add/edit form fields in the widget, c) &lt;b&gt;ACTIVE&lt;/b&gt; - to immediately host the widget. You can use the PUT /widgets/{widgetId}/state endpoint to transition a widget between the above mentioned states. An allowed transition would follow the any of the following sequences: DRAFT-&gt;AUTHORING-&gt;ACTIVE, ACTIVE&lt;-&gt;INACTIVE, DRAFT-&gt;CANCELLED.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {module:model/widgets/WidgetCreationInfoV6} widgetInfo Information about the widget that you want to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/WidgetCreationResponse}
     */
    this.createWidget = function(authorization, widgetInfo, opts) {
      return this.createWidgetWithHttpInfo(authorization, widgetInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves detailed member info along with IDs for different types of participants.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/WidgetMembersInfo} and HTTP response
     */
    this.getAllWidgetMembersWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllWidgetMembers");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getAllWidgetMembers");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WidgetMembersInfo;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves detailed member info along with IDs for different types of participants.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/WidgetMembersInfo}
     */
    this.getAllWidgetMembers = function(authorization, widgetId, opts) {
      return this.getAllWidgetMembersWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the events information for a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/WidgetEventList} and HTTP response
     */
    this.getEventsWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEvents");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getEvents");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WidgetEventList;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the events information for a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/WidgetEventList}
     */
    this.getEvents = function(authorization, widgetId, opts) {
      return this.getEventsWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the participant set of a widget identified by widgetId in the path.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {String} participantSetId The participant set identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/DetailedWidgetParticipantSetInfo} and HTTP response
     */
    this.getParticipantSetWithHttpInfo = function(authorization, widgetId, participantSetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getParticipantSet");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getParticipantSet");
      }

      // verify the required parameter 'participantSetId' is set
      if (participantSetId === undefined || participantSetId === null) {
        throw new Error("Missing the required parameter 'participantSetId' when calling getParticipantSet");
      }


      var pathParams = {
        'widgetId': widgetId,
        'participantSetId': participantSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DetailedWidgetParticipantSetInfo;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/members/participantSets/{participantSetId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the participant set of a widget identified by widgetId in the path.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {String} participantSetId The participant set identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/DetailedWidgetParticipantSetInfo}
     */
    this.getParticipantSet = function(authorization, widgetId, participantSetId, opts) {
      return this.getParticipantSetWithHttpInfo(authorization, widgetId, participantSetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves agreements for the widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {Boolean} opts.showHiddenAgreements A query parameter to fetch all the hidden agreements along with the visible agreements. Default value is false.
     * @param {String} opts.cursor Used to navigate through the pages. If not provided, returns the first page.
     * @param {Number} opts.pageSize Number of intended items in the response page. If not provided, it is decided by the application settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/WidgetAgreements} and HTTP response
     */
    this.getWidgetAgreementsWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetAgreements");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetAgreements");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
        'showHiddenAgreements': opts['showHiddenAgreements'],
        'cursor': opts['cursor'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WidgetAgreements;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/agreements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves agreements for the widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {Boolean} opts.showHiddenAgreements A query parameter to fetch all the hidden agreements along with the visible agreements. Default value is false.
     * @param {String} opts.cursor Used to navigate through the pages. If not provided, returns the first page.
     * @param {Number} opts.pageSize Number of intended items in the response page. If not provided, it is decided by the application settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/WidgetAgreements}
     */
    this.getWidgetAgreements = function(authorization, widgetId, opts) {
      return this.getWidgetAgreementsWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves image urls of all visible pages of a document associated with a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.imageSizes A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. 
     * @param {Boolean} opts.showImageAvailabilityOnly When set to true, returns only image availability. Else, returns both image urls and its availability.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/WidgetDocumentsImageUrlsInfo} and HTTP response
     */
    this.getWidgetAllDocumentsImageUrlsWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetAllDocumentsImageUrls");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetAllDocumentsImageUrls");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
        'imageSizes': opts['imageSizes'],
        'showImageAvailabilityOnly': opts['showImageAvailabilityOnly'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WidgetDocumentsImageUrlsInfo;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/documents/imageUrls', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves image urls of all visible pages of a document associated with a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.imageSizes A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. 
     * @param {Boolean} opts.showImageAvailabilityOnly When set to true, returns only image availability. Else, returns both image urls and its availability.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/WidgetDocumentsImageUrlsInfo}
     */
    this.getWidgetAllDocumentsImageUrls = function(authorization, widgetId, opts) {
      return this.getWidgetAllDocumentsImageUrlsWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the audit trail of a widget identified by widgetId.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
     */
    this.getWidgetAuditTrailWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetAuditTrail");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetAuditTrail");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/pdf', 'application/pdf;encoding=base64'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/widgets/{widgetId}/auditTrail', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the audit trail of a widget identified by widgetId.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
     */
    this.getWidgetAuditTrail = function(authorization, widgetId, opts) {
      return this.getWidgetAuditTrailWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a single combined PDF document for the documents associated with a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.versionId The version identifier of widget as provided by the API which retrieves information of a specific widget. If not provided then latest version will be used.
     * @param {String} opts.participantId The ID of the participant to be used to retrieve documents. If not mentioned, the participation of api caller is used.
     * @param {Boolean} opts.attachAuditReport When set to YES, attach an audit report to the signed Widget PDF. Default value is false
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
     */
    this.getWidgetCombinedDocumentWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetCombinedDocument");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetCombinedDocument");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantId': opts['participantId'],
        'attachAuditReport': opts['attachAuditReport'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/pdf', 'application/pdf;encoding=base64'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/widgets/{widgetId}/combinedDocument', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves a single combined PDF document for the documents associated with a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.versionId The version identifier of widget as provided by the API which retrieves information of a specific widget. If not provided then latest version will be used.
     * @param {String} opts.participantId The ID of the participant to be used to retrieve documents. If not mentioned, the participation of api caller is used.
     * @param {Boolean} opts.attachAuditReport When set to YES, attach an audit report to the signed Widget PDF. Default value is false
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
     */
    this.getWidgetCombinedDocument = function(authorization, widgetId, opts) {
      return this.getWidgetCombinedDocumentWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the file stream of a document of a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {String} documentId The document identifier, as retrieved from the API which fetches the documents of a specified widget
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
     */
    this.getWidgetDocumentInfoWithHttpInfo = function(authorization, widgetId, documentId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetDocumentInfo");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetDocumentInfo");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getWidgetDocumentInfo");
      }


      var pathParams = {
        'widgetId': widgetId,
        'documentId': documentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/pdf', 'application/pdf;encoding=base64'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/widgets/{widgetId}/documents/{documentId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the file stream of a document of a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {String} documentId The document identifier, as retrieved from the API which fetches the documents of a specified widget
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
     */
    this.getWidgetDocumentInfo = function(authorization, widgetId, documentId, opts) {
      return this.getWidgetDocumentInfoWithHttpInfo(authorization, widgetId, documentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the IDs of the documents associated with widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.versionId The version identifier of widget as provided by the API which retrieves information of a specific widget. If not provided then latest version will be used.
     * @param {String} opts.participantId The ID of the participant to be used to retrieve documents. If not mentioned, the participation of api caller is used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/WidgetDocuments} and HTTP response
     */
    this.getWidgetDocumentsWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetDocuments");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetDocuments");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantId': opts['participantId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WidgetDocuments;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the IDs of the documents associated with widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.versionId The version identifier of widget as provided by the API which retrieves information of a specific widget. If not provided then latest version will be used.
     * @param {String} opts.participantId The ID of the participant to be used to retrieve documents. If not mentioned, the participation of api caller is used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/WidgetDocuments}
     */
    this.getWidgetDocuments = function(authorization, widgetId, opts) {
      return this.getWidgetDocumentsWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves data entered by the user into interactive form fields at the time they signed the widget
     * CSV file stream containing form data information
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Blob'} and HTTP response
     */
    this.getWidgetFormDataWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetFormData");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetFormData");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/csv'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/widgets/{widgetId}/formData', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves data entered by the user into interactive form fields at the time they signed the widget
     * CSV file stream containing form data information
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Blob'}
     */
    this.getWidgetFormData = function(authorization, widgetId, opts) {
      return this.getWidgetFormDataWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the details of a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/WidgetCreationInfoV6} and HTTP response
     */
    this.getWidgetInfoWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetInfo");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetInfo");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WidgetCreationInfoV6;

      return this.apiClient.callApi(
        '/widgets/{widgetId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the details of a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/WidgetCreationInfoV6}
     */
    this.getWidgetInfo = function(authorization, widgetId, opts) {
      return this.getWidgetInfoWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the latest note of a widget for the API user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/Note} and HTTP response
     */
    this.getWidgetNoteForApiUserWithHttpInfo = function(authorization, widgetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetNoteForApiUser");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetNoteForApiUser");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Note;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/me/note', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the latest note of a widget for the API user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/Note}
     */
    this.getWidgetNoteForApiUser = function(authorization, widgetId, opts) {
      return this.getWidgetNoteForApiUserWithHttpInfo(authorization, widgetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the security options for a particular participant.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {String} participantSetId The participant set identifier
     * @param {String} participantId The participant identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/ParticipantSecurityOption} and HTTP response
     */
    this.getWidgetSecurityOptionsForParticipationWithHttpInfo = function(authorization, widgetId, participantSetId, participantId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetSecurityOptionsForParticipation");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetSecurityOptionsForParticipation");
      }

      // verify the required parameter 'participantSetId' is set
      if (participantSetId === undefined || participantSetId === null) {
        throw new Error("Missing the required parameter 'participantSetId' when calling getWidgetSecurityOptionsForParticipation");
      }

      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling getWidgetSecurityOptionsForParticipation");
      }


      var pathParams = {
        'widgetId': widgetId,
        'participantSetId': participantSetId,
        'participantId': participantId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'If-None-Match': opts['ifNoneMatch'],
        'x-api-user': opts['xApiUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ParticipantSecurityOption;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/members/participantSets/{participantSetId}/participants/{participantId}/securityOptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the security options for a particular participant.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {String} participantSetId The participant set identifier
     * @param {String} participantId The participant identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn&#39;t changed.
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/ParticipantSecurityOption}
     */
    this.getWidgetSecurityOptionsForParticipation = function(authorization, widgetId, participantSetId, participantId, opts) {
      return this.getWidgetSecurityOptionsForParticipationWithHttpInfo(authorization, widgetId, participantSetId, participantId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves the requested views for a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt; - widget read is always required&lt;/li&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;user_login&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;user_login&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;user_login&lt;/a&gt; - Required additionally if the autoLoginUser parameter is set to true&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/WidgetViewInfo} widgetViewInfo Name of the required view and its desired configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/WidgetViews} and HTTP response
     */
    this.getWidgetViewWithHttpInfo = function(authorization, widgetId, widgetViewInfo, opts) {
      opts = opts || {};
      var postBody = widgetViewInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgetView");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getWidgetView");
      }

      // verify the required parameter 'widgetViewInfo' is set
      if (widgetViewInfo === undefined || widgetViewInfo === null) {
        throw new Error("Missing the required parameter 'widgetViewInfo' when calling getWidgetView");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WidgetViews;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/views', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves the requested views for a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt; - widget read is always required&lt;/li&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;user_login&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;user_login&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;user_login&lt;/a&gt; - Required additionally if the autoLoginUser parameter is set to true&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/WidgetViewInfo} widgetViewInfo Name of the required view and its desired configuration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/WidgetViews}
     */
    this.getWidgetView = function(authorization, widgetId, widgetViewInfo, opts) {
      return this.getWidgetViewWithHttpInfo(authorization, widgetId, widgetViewInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves widgets for a user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {Boolean} opts.showHiddenWidgets A query parameter to fetch all the hidden widgets along with the visible widgets. Default value is false.
     * @param {String} opts.cursor Used to navigate through the pages. If not provided, returns the first page.
     * @param {Number} opts.pageSize Number of intended items in the response page. If not provided, it is decided by the application settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/widgets/UserWidgets} and HTTP response
     */
    this.getWidgetsWithHttpInfo = function(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWidgets");
      }


      var pathParams = {
      };
      var queryParams = {
        'showHiddenWidgets': opts['showHiddenWidgets'],
        'cursor': opts['cursor'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserWidgets;

      return this.apiClient.callApi(
        '/widgets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves widgets for a user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_read&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @param {Boolean} opts.showHiddenWidgets A query parameter to fetch all the hidden widgets along with the visible widgets. Default value is false.
     * @param {String} opts.cursor Used to navigate through the pages. If not provided, returns the first page.
     * @param {Number} opts.pageSize Number of intended items in the response page. If not provided, it is decided by the application settings.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/widgets/UserWidgets}
     */
    this.getWidgets = function(authorization, opts) {
      return this.getWidgetsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/WidgetInfo} widgetInfo Widget update information object.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateWidgetWithHttpInfo = function(authorization, ifMatch, widgetId, widgetInfo, opts) {
      opts = opts || {};
      var postBody = widgetInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateWidget");
      }

      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateWidget");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling updateWidget");
      }

      // verify the required parameter 'widgetInfo' is set
      if (widgetInfo === undefined || widgetInfo === null) {
        throw new Error("Missing the required parameter 'widgetInfo' when calling updateWidget");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-Match': ifMatch
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/widgets/{widgetId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/WidgetInfo} widgetInfo Widget update information object.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateWidget = function(authorization, ifMatch, widgetId, widgetInfo, opts) {
      return this.updateWidgetWithHttpInfo(authorization, ifMatch, widgetId, widgetInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the latest note of a widget for the API user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/Note} note The note to be associated with the widget.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateWidgetNoteForApiUserWithHttpInfo = function(authorization, widgetId, note, opts) {
      opts = opts || {};
      var postBody = note;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateWidgetNoteForApiUser");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling updateWidgetNoteForApiUser");
      }

      // verify the required parameter 'note' is set
      if (note === undefined || note === null) {
        throw new Error("Missing the required parameter 'note' when calling updateWidgetNoteForApiUser");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/me/note', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the latest note of a widget for the API user.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/Note} note The note to be associated with the widget.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateWidgetNoteForApiUser = function(authorization, widgetId, note, opts) {
      return this.updateWidgetNoteForApiUserWithHttpInfo(authorization, widgetId, note, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the security options for a particular participant.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {String} participantSetId The participant set identifier
     * @param {String} participantId The participant identifier
     * @param {module:model/widgets/ParticipantSecurityOption} participantSecurityOption Security options that apply to the participant
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateWidgetSecurityOptionsForParticipationWithHttpInfo = function(authorization, ifMatch, widgetId, participantSetId, participantId, participantSecurityOption, opts) {
      opts = opts || {};
      var postBody = participantSecurityOption;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateWidgetSecurityOptionsForParticipation");
      }

      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateWidgetSecurityOptionsForParticipation");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling updateWidgetSecurityOptionsForParticipation");
      }

      // verify the required parameter 'participantSetId' is set
      if (participantSetId === undefined || participantSetId === null) {
        throw new Error("Missing the required parameter 'participantSetId' when calling updateWidgetSecurityOptionsForParticipation");
      }

      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling updateWidgetSecurityOptionsForParticipation");
      }

      // verify the required parameter 'participantSecurityOption' is set
      if (participantSecurityOption === undefined || participantSecurityOption === null) {
        throw new Error("Missing the required parameter 'participantSecurityOption' when calling updateWidgetSecurityOptionsForParticipation");
      }


      var pathParams = {
        'widgetId': widgetId,
        'participantSetId': participantSetId,
        'participantId': participantId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'If-Match': ifMatch,
        'x-api-user': opts['xApiUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/members/participantSets/{participantSetId}/participants/{participantId}/securityOptions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the security options for a particular participant.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {String} participantSetId The participant set identifier
     * @param {String} participantId The participant identifier
     * @param {module:model/widgets/ParticipantSecurityOption} participantSecurityOption Security options that apply to the participant
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateWidgetSecurityOptionsForParticipation = function(authorization, ifMatch, widgetId, participantSetId, participantId, participantSecurityOption, opts) {
      return this.updateWidgetSecurityOptionsForParticipationWithHttpInfo(authorization, ifMatch, widgetId, participantSetId, participantId, participantSecurityOption, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the state of a widget identified by widgetId in the path.
     * This endpoint can be used by creator of the widget to transition between the states of widget. An allowed transition would follow any of the following sequence :  DRAFT-&gt;AUTHORING-&gt;ACTIVE, ACTIVE&lt;-&gt;INACTIVE, DRAFT-&gt;CANCELLED.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/WidgetStateInfo} widgetStateInfo 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateWidgetStateWithHttpInfo = function(authorization, ifMatch, widgetId, widgetStateInfo, opts) {
      opts = opts || {};
      var postBody = widgetStateInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateWidgetState");
      }

      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateWidgetState");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling updateWidgetState");
      }

      // verify the required parameter 'widgetStateInfo' is set
      if (widgetStateInfo === undefined || widgetStateInfo === null) {
        throw new Error("Missing the required parameter 'widgetStateInfo' when calling updateWidgetState");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser'],
        'If-Match': ifMatch
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/csv'];
      var returnType = null;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/state', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the state of a widget identified by widgetId in the path.
     * This endpoint can be used by creator of the widget to transition between the states of widget. An allowed transition would follow any of the following sequence :  DRAFT-&gt;AUTHORING-&gt;ACTIVE, ACTIVE&lt;-&gt;INACTIVE, DRAFT-&gt;CANCELLED.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} ifMatch The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/WidgetStateInfo} widgetStateInfo 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateWidgetState = function(authorization, ifMatch, widgetId, widgetStateInfo, opts) {
      return this.updateWidgetStateWithHttpInfo(authorization, ifMatch, widgetId, widgetStateInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the visibility of widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/VisibilityInfo} visibilityInfo Information to update visibility of widget
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateWidgetVisibilityWithHttpInfo = function(authorization, widgetId, visibilityInfo, opts) {
      opts = opts || {};
      var postBody = visibilityInfo;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateWidgetVisibility");
      }

      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling updateWidgetVisibility");
      }

      // verify the required parameter 'visibilityInfo' is set
      if (visibilityInfo === undefined || visibilityInfo === null) {
        throw new Error("Missing the required parameter 'visibilityInfo' when calling updateWidgetVisibility");
      }


      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization,
        'x-api-user': opts['xApiUser'],
        'x-on-behalf-of-user': opts['xOnBehalfOfUser']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/widgets/{widgetId}/me/visibility', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the visibility of widget.
     * @param {String} authorization An &lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc()\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;OAuth Access Token&lt;/a&gt; with scopes:&lt;ul&gt;&lt;li style&#x3D;&#39;list-style-type: square&#39;&gt;&lt;a href&#x3D;\&quot;#\&quot; onclick&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; oncontextmenu&#x3D;\&quot;this.href&#x3D;oauthDoc(&#39;widget_write&#39;)\&quot; target&#x3D;\&quot;oauthDoc\&quot;&gt;widget_write&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;in the format &lt;b&gt;&#39;Bearer {accessToken}&#39;.
     * @param {String} widgetId The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {module:model/widgets/VisibilityInfo} visibilityInfo Information to update visibility of widget
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiUser The userId or email of API caller using the account or group token in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; If it is not specified, then the caller is inferred from the token.
     * @param {String} opts.xOnBehalfOfUser The userId or email in the format &lt;b&gt;userid:{userId} OR email:{email}.&lt;/b&gt; of the user that has shared his/her account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateWidgetVisibility = function(authorization, widgetId, visibilityInfo, opts) {
      return this.updateWidgetVisibilityWithHttpInfo(authorization, widgetId, visibilityInfo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
